
WB055_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080049c0  080049c0  000149c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  080049d0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000320  20000010  080049dc  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000330  080049dc  00020330  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010498  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000231d  00000000  00000000  000304d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001430  00000000  00000000  000327f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001328  00000000  00000000  00033c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000025fe  00000000  00000000  00034f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c657  00000000  00000000  0003754e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d3efe  00000000  00000000  00043ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00117aa3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000054a0  00000000  00000000  00117b20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	080048cc 	.word	0x080048cc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	080048cc 	.word	0x080048cc

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b972 	b.w	800047c <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	4688      	mov	r8, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14b      	bne.n	8000256 <__udivmoddi4+0xa6>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4615      	mov	r5, r2
 80001c2:	d967      	bls.n	8000294 <__udivmoddi4+0xe4>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b14a      	cbz	r2, 80001de <__udivmoddi4+0x2e>
 80001ca:	f1c2 0720 	rsb	r7, r2, #32
 80001ce:	fa01 f302 	lsl.w	r3, r1, r2
 80001d2:	fa20 f707 	lsr.w	r7, r0, r7
 80001d6:	4095      	lsls	r5, r2
 80001d8:	ea47 0803 	orr.w	r8, r7, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001e2:	0c23      	lsrs	r3, r4, #16
 80001e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e8:	fa1f fc85 	uxth.w	ip, r5
 80001ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80001f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f4:	fb07 f10c 	mul.w	r1, r7, ip
 80001f8:	4299      	cmp	r1, r3
 80001fa:	d909      	bls.n	8000210 <__udivmoddi4+0x60>
 80001fc:	18eb      	adds	r3, r5, r3
 80001fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000202:	f080 811b 	bcs.w	800043c <__udivmoddi4+0x28c>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 8118 	bls.w	800043c <__udivmoddi4+0x28c>
 800020c:	3f02      	subs	r7, #2
 800020e:	442b      	add	r3, r5
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0fe 	udiv	r0, r3, lr
 8000218:	fb0e 3310 	mls	r3, lr, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 fc0c 	mul.w	ip, r0, ip
 8000224:	45a4      	cmp	ip, r4
 8000226:	d909      	bls.n	800023c <__udivmoddi4+0x8c>
 8000228:	192c      	adds	r4, r5, r4
 800022a:	f100 33ff 	add.w	r3, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x290>
 8000232:	45a4      	cmp	ip, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x290>
 8000238:	3802      	subs	r0, #2
 800023a:	442c      	add	r4, r5
 800023c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000240:	eba4 040c 	sub.w	r4, r4, ip
 8000244:	2700      	movs	r7, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa0>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	4639      	mov	r1, r7
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xbe>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80eb 	beq.w	8000436 <__udivmoddi4+0x286>
 8000260:	2700      	movs	r7, #0
 8000262:	e9c6 0100 	strd	r0, r1, [r6]
 8000266:	4638      	mov	r0, r7
 8000268:	4639      	mov	r1, r7
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f783 	clz	r7, r3
 8000272:	2f00      	cmp	r7, #0
 8000274:	d147      	bne.n	8000306 <__udivmoddi4+0x156>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd0>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fa 	bhi.w	8000474 <__udivmoddi4+0x2c4>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa0>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa0>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xe8>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 808f 	bne.w	80003c0 <__udivmoddi4+0x210>
 80002a2:	1b49      	subs	r1, r1, r5
 80002a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a8:	fa1f f885 	uxth.w	r8, r5
 80002ac:	2701      	movs	r7, #1
 80002ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb08 f10c 	mul.w	r1, r8, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d907      	bls.n	80002d4 <__udivmoddi4+0x124>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x122>
 80002cc:	4299      	cmp	r1, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2bc>
 80002d2:	4684      	mov	ip, r0
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	b2a3      	uxth	r3, r4
 80002d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80002e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	45a0      	cmp	r8, r4
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0x14c>
 80002ec:	192c      	adds	r4, r5, r4
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14a>
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	f200 80b6 	bhi.w	8000466 <__udivmoddi4+0x2b6>
 80002fa:	4618      	mov	r0, r3
 80002fc:	eba4 0408 	sub.w	r4, r4, r8
 8000300:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000304:	e79f      	b.n	8000246 <__udivmoddi4+0x96>
 8000306:	f1c7 0c20 	rsb	ip, r7, #32
 800030a:	40bb      	lsls	r3, r7
 800030c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000310:	ea4e 0e03 	orr.w	lr, lr, r3
 8000314:	fa01 f407 	lsl.w	r4, r1, r7
 8000318:	fa20 f50c 	lsr.w	r5, r0, ip
 800031c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000320:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000324:	4325      	orrs	r5, r4
 8000326:	fbb3 f9f8 	udiv	r9, r3, r8
 800032a:	0c2c      	lsrs	r4, r5, #16
 800032c:	fb08 3319 	mls	r3, r8, r9, r3
 8000330:	fa1f fa8e 	uxth.w	sl, lr
 8000334:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000338:	fb09 f40a 	mul.w	r4, r9, sl
 800033c:	429c      	cmp	r4, r3
 800033e:	fa02 f207 	lsl.w	r2, r2, r7
 8000342:	fa00 f107 	lsl.w	r1, r0, r7
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b0>
 8000348:	eb1e 0303 	adds.w	r3, lr, r3
 800034c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000350:	f080 8087 	bcs.w	8000462 <__udivmoddi4+0x2b2>
 8000354:	429c      	cmp	r4, r3
 8000356:	f240 8084 	bls.w	8000462 <__udivmoddi4+0x2b2>
 800035a:	f1a9 0902 	sub.w	r9, r9, #2
 800035e:	4473      	add	r3, lr
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	b2ad      	uxth	r5, r5
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000370:	fb00 fa0a 	mul.w	sl, r0, sl
 8000374:	45a2      	cmp	sl, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1da>
 8000378:	eb1e 0404 	adds.w	r4, lr, r4
 800037c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000380:	d26b      	bcs.n	800045a <__udivmoddi4+0x2aa>
 8000382:	45a2      	cmp	sl, r4
 8000384:	d969      	bls.n	800045a <__udivmoddi4+0x2aa>
 8000386:	3802      	subs	r0, #2
 8000388:	4474      	add	r4, lr
 800038a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038e:	fba0 8902 	umull	r8, r9, r0, r2
 8000392:	eba4 040a 	sub.w	r4, r4, sl
 8000396:	454c      	cmp	r4, r9
 8000398:	46c2      	mov	sl, r8
 800039a:	464b      	mov	r3, r9
 800039c:	d354      	bcc.n	8000448 <__udivmoddi4+0x298>
 800039e:	d051      	beq.n	8000444 <__udivmoddi4+0x294>
 80003a0:	2e00      	cmp	r6, #0
 80003a2:	d069      	beq.n	8000478 <__udivmoddi4+0x2c8>
 80003a4:	ebb1 050a 	subs.w	r5, r1, sl
 80003a8:	eb64 0403 	sbc.w	r4, r4, r3
 80003ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003b0:	40fd      	lsrs	r5, r7
 80003b2:	40fc      	lsrs	r4, r7
 80003b4:	ea4c 0505 	orr.w	r5, ip, r5
 80003b8:	e9c6 5400 	strd	r5, r4, [r6]
 80003bc:	2700      	movs	r7, #0
 80003be:	e747      	b.n	8000250 <__udivmoddi4+0xa0>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f703 	lsr.w	r7, r0, r3
 80003c8:	4095      	lsls	r5, r2
 80003ca:	fa01 f002 	lsl.w	r0, r1, r2
 80003ce:	fa21 f303 	lsr.w	r3, r1, r3
 80003d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d6:	4338      	orrs	r0, r7
 80003d8:	0c01      	lsrs	r1, r0, #16
 80003da:	fbb3 f7fe 	udiv	r7, r3, lr
 80003de:	fa1f f885 	uxth.w	r8, r5
 80003e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ea:	fb07 f308 	mul.w	r3, r7, r8
 80003ee:	428b      	cmp	r3, r1
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x256>
 80003f6:	1869      	adds	r1, r5, r1
 80003f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80003fc:	d22f      	bcs.n	800045e <__udivmoddi4+0x2ae>
 80003fe:	428b      	cmp	r3, r1
 8000400:	d92d      	bls.n	800045e <__udivmoddi4+0x2ae>
 8000402:	3f02      	subs	r7, #2
 8000404:	4429      	add	r1, r5
 8000406:	1acb      	subs	r3, r1, r3
 8000408:	b281      	uxth	r1, r0
 800040a:	fbb3 f0fe 	udiv	r0, r3, lr
 800040e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000412:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000416:	fb00 f308 	mul.w	r3, r0, r8
 800041a:	428b      	cmp	r3, r1
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x27e>
 800041e:	1869      	adds	r1, r5, r1
 8000420:	f100 3cff 	add.w	ip, r0, #4294967295
 8000424:	d217      	bcs.n	8000456 <__udivmoddi4+0x2a6>
 8000426:	428b      	cmp	r3, r1
 8000428:	d915      	bls.n	8000456 <__udivmoddi4+0x2a6>
 800042a:	3802      	subs	r0, #2
 800042c:	4429      	add	r1, r5
 800042e:	1ac9      	subs	r1, r1, r3
 8000430:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000434:	e73b      	b.n	80002ae <__udivmoddi4+0xfe>
 8000436:	4637      	mov	r7, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e709      	b.n	8000250 <__udivmoddi4+0xa0>
 800043c:	4607      	mov	r7, r0
 800043e:	e6e7      	b.n	8000210 <__udivmoddi4+0x60>
 8000440:	4618      	mov	r0, r3
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x8c>
 8000444:	4541      	cmp	r1, r8
 8000446:	d2ab      	bcs.n	80003a0 <__udivmoddi4+0x1f0>
 8000448:	ebb8 0a02 	subs.w	sl, r8, r2
 800044c:	eb69 020e 	sbc.w	r2, r9, lr
 8000450:	3801      	subs	r0, #1
 8000452:	4613      	mov	r3, r2
 8000454:	e7a4      	b.n	80003a0 <__udivmoddi4+0x1f0>
 8000456:	4660      	mov	r0, ip
 8000458:	e7e9      	b.n	800042e <__udivmoddi4+0x27e>
 800045a:	4618      	mov	r0, r3
 800045c:	e795      	b.n	800038a <__udivmoddi4+0x1da>
 800045e:	4667      	mov	r7, ip
 8000460:	e7d1      	b.n	8000406 <__udivmoddi4+0x256>
 8000462:	4681      	mov	r9, r0
 8000464:	e77c      	b.n	8000360 <__udivmoddi4+0x1b0>
 8000466:	3802      	subs	r0, #2
 8000468:	442c      	add	r4, r5
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0x14c>
 800046c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000470:	442b      	add	r3, r5
 8000472:	e72f      	b.n	80002d4 <__udivmoddi4+0x124>
 8000474:	4638      	mov	r0, r7
 8000476:	e708      	b.n	800028a <__udivmoddi4+0xda>
 8000478:	4637      	mov	r7, r6
 800047a:	e6e9      	b.n	8000250 <__udivmoddi4+0xa0>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000490:	f023 0218 	bic.w	r2, r3, #24
 8000494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4313      	orrs	r3, r2
 800049c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d0:	68fb      	ldr	r3, [r7, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fbb7 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f807 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f921 	bl	8000730 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ee:	f000 f8a9 	bl	8000644 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004f2:	f000 f8f5 	bl	80006e0 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <main+0x18>

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b0ae      	sub	sp, #184	; 0xb8
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000502:	2248      	movs	r2, #72	; 0x48
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f004 f9d8 	bl	80048bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
 800051c:	615a      	str	r2, [r3, #20]
 800051e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2250      	movs	r2, #80	; 0x50
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f004 f9c8 	bl	80048bc <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800053a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	f023 0303 	bic.w	r3, r3, #3
 8000546:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000550:	f000 ffbe 	bl	80014d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000554:	2000      	movs	r0, #0
 8000556:	f7ff ff93 	bl	8000480 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055a:	4b39      	ldr	r3, [pc, #228]	; (8000640 <SystemClock_Config+0x148>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000562:	4a37      	ldr	r2, [pc, #220]	; (8000640 <SystemClock_Config+0x148>)
 8000564:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000568:	6013      	str	r3, [r2, #0]
 800056a:	4b35      	ldr	r3, [pc, #212]	; (8000640 <SystemClock_Config+0x148>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000576:	2327      	movs	r3, #39	; 0x27
 8000578:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000588:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800058a:	2301      	movs	r3, #1
 800058c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2340      	movs	r3, #64	; 0x40
 8000592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800059c:	2360      	movs	r3, #96	; 0x60
 800059e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fb41 	bl	8001c34 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b8:	f000 f918 	bl	80007ec <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005bc:	236f      	movs	r3, #111	; 0x6f
 80005be:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005c0:	2302      	movs	r3, #2
 80005c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005dc:	2101      	movs	r1, #1
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 febc 	bl	800235c <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80005ea:	f000 f8ff 	bl	80007ec <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80005ee:	f242 1301 	movw	r3, #8449	; 0x2101
 80005f2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80005f4:	2318      	movs	r3, #24
 80005f6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80005f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80005fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000602:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000604:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000608:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800060a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800060e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000614:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000618:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800061a:	2300      	movs	r3, #0
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800061e:	2300      	movs	r3, #0
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fae3 	bl	8002bf0 <HAL_RCCEx_PeriphCLKConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8000630:	f000 f8dc 	bl	80007ec <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000634:	f002 fc51 	bl	8002eda <HAL_RCCEx_EnableMSIPLLMode>
}
 8000638:	bf00      	nop
 800063a:	37b8      	adds	r7, #184	; 0xb8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58000400 	.word	0x58000400

08000644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <MX_USART1_UART_Init+0x98>)
 800064c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800064e:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800065c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 800066c:	220c      	movs	r2, #12
 800066e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000684:	2200      	movs	r2, #0
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068e:	4812      	ldr	r0, [pc, #72]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 8000690:	f002 fd5a 	bl	8003148 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800069a:	f000 f8a7 	bl	80007ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069e:	2100      	movs	r1, #0
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 80006a2:	f003 ffa8 	bl	80045f6 <HAL_UARTEx_SetTxFifoThreshold>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80006ac:	f000 f89e 	bl	80007ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4809      	ldr	r0, [pc, #36]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 80006b4:	f003 ffdd 	bl	8004672 <HAL_UARTEx_SetRxFifoThreshold>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80006be:	f000 f895 	bl	80007ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART1_UART_Init+0x94>)
 80006c4:	f003 ff5e 	bl	8004584 <HAL_UARTEx_DisableFifoMode>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80006ce:	f000 f88d 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000002c 	.word	0x2000002c
 80006dc:	40013800 	.word	0x40013800

080006e0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USB_PCD_Init+0x48>)
 80006e6:	4a11      	ldr	r2, [pc, #68]	; (800072c <MX_USB_PCD_Init+0x4c>)
 80006e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_USB_PCD_Init+0x48>)
 80006ec:	2208      	movs	r2, #8
 80006ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_USB_PCD_Init+0x48>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USB_PCD_Init+0x48>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_USB_PCD_Init+0x48>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USB_PCD_Init+0x48>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_USB_PCD_Init+0x48>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USB_PCD_Init+0x48>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_USB_PCD_Init+0x48>)
 8000716:	f000 fdf6 	bl	8001306 <HAL_PCD_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000720:	f000 f864 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000b8 	.word	0x200000b8
 800072c:	40006800 	.word	0x40006800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000744:	2004      	movs	r0, #4
 8000746:	f7ff feb1 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2002      	movs	r0, #2
 800074c:	f7ff feae 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff feab 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	2008      	movs	r0, #8
 8000758:	f7ff fea8 	bl	80004ac <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2123      	movs	r1, #35	; 0x23
 8000760:	481e      	ldr	r0, [pc, #120]	; (80007dc <MX_GPIO_Init+0xac>)
 8000762:	f000 fd95 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000766:	2310      	movs	r3, #16
 8000768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076e:	2301      	movs	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	481a      	ldr	r0, [pc, #104]	; (80007e0 <MX_GPIO_Init+0xb0>)
 8000778:	f000 fc02 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800077c:	2323      	movs	r3, #35	; 0x23
 800077e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4812      	ldr	r0, [pc, #72]	; (80007dc <MX_GPIO_Init+0xac>)
 8000792:	f000 fbf5 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000796:	2301      	movs	r3, #1
 8000798:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_GPIO_Init+0xb4>)
 800079c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079e:	2301      	movs	r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	4810      	ldr	r0, [pc, #64]	; (80007e8 <MX_GPIO_Init+0xb8>)
 80007a8:	f000 fbea 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 80007ac:	2302      	movs	r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <MX_GPIO_Init+0xb8>)
 80007be:	f000 fbdf 	bl	8000f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2006      	movs	r0, #6
 80007c8:	f000 fba5 	bl	8000f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007cc:	2006      	movs	r0, #6
 80007ce:	f000 fbbc 	bl	8000f4a <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	48000400 	.word	0x48000400
 80007e0:	48000800 	.word	0x48000800
 80007e4:	10310000 	.word	0x10310000
 80007e8:	48000c00 	.word	0x48000c00

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <LL_AHB2_GRP1_EnableClock>:
{
 80007fa:	b480      	push	{r7}
 80007fc:	b085      	sub	sp, #20
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000808:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4313      	orrs	r3, r2
 8000810:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4013      	ands	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800081e:	68fb      	ldr	r3, [r7, #12]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000838:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800083a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4313      	orrs	r3, r2
 8000842:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000848:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4013      	ands	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000850:	68fb      	ldr	r3, [r7, #12]
}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800085e:	b480      	push	{r7}
 8000860:	b085      	sub	sp, #20
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800086a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800086c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4313      	orrs	r3, r2
 8000874:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4013      	ands	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_UART_MspInit+0x58>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d116      	bne.n	80008f0 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80008c6:	f7ff ffca 	bl	800085e <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2002      	movs	r0, #2
 80008cc:	f7ff ff95 	bl	80007fa <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80008d0:	23c0      	movs	r3, #192	; 0xc0
 80008d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d8:	2301      	movs	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008e0:	2307      	movs	r3, #7
 80008e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4619      	mov	r1, r3
 80008ea:	4804      	ldr	r0, [pc, #16]	; (80008fc <HAL_UART_MspInit+0x5c>)
 80008ec:	f000 fb48 	bl	8000f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40013800 	.word	0x40013800
 80008fc:	48000400 	.word	0x48000400

08000900 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_PCD_MspInit+0x5c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d118      	bne.n	8000954 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff ff69 	bl	80007fa <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000928:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800092c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800093a:	230a      	movs	r3, #10
 800093c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fb1a 	bl	8000f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800094c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000950:	f7ff ff6c 	bl	800082c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40006800 	.word	0x40006800

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <MemManage_Handler+0x4>

0800097a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <UsageFault_Handler+0x4>

08000986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f9a8 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  int pin_state=HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 80009c2:	2101      	movs	r1, #1
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <EXTI0_IRQHandler+0x30>)
 80009c6:	f000 fc4b 	bl	8001260 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, pin_state);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	2102      	movs	r1, #2
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <EXTI0_IRQHandler+0x34>)
 80009d8:	f000 fc5a 	bl	8001290 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009dc:	2001      	movs	r0, #1
 80009de:	f000 fc6f 	bl	80012c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	48000c00 	.word	0x48000c00
 80009f0:	48000400 	.word	0x48000400

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <SystemInit+0xa0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <SystemInit+0xa0>)
 8000a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a04:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <SystemInit+0xa0>)
 8000a06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a22:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a26:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <SystemInit+0xa4>)
 8000a34:	4013      	ands	r3, r2
 8000a36:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a44:	f023 0305 	bic.w	r3, r3, #5
 8000a48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a58:	f023 0301 	bic.w	r3, r3, #1
 8000a5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <SystemInit+0xa8>)
 8000a66:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a6c:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <SystemInit+0xa8>)
 8000a6e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00
 8000a98:	faf6fefb 	.word	0xfaf6fefb
 8000a9c:	22041000 	.word	0x22041000

08000aa0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b087      	sub	sp, #28
 8000aa4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	091b      	lsrs	r3, r3, #4
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	4a47      	ldr	r2, [pc, #284]	; (8000bd0 <SystemCoreClockUpdate+0x130>)
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	f003 030c 	and.w	r3, r3, #12
 8000ac4:	2b0c      	cmp	r3, #12
 8000ac6:	d867      	bhi.n	8000b98 <SystemCoreClockUpdate+0xf8>
 8000ac8:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <SystemCoreClockUpdate+0x30>)
 8000aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ace:	bf00      	nop
 8000ad0:	08000b05 	.word	0x08000b05
 8000ad4:	08000b99 	.word	0x08000b99
 8000ad8:	08000b99 	.word	0x08000b99
 8000adc:	08000b99 	.word	0x08000b99
 8000ae0:	08000b0d 	.word	0x08000b0d
 8000ae4:	08000b99 	.word	0x08000b99
 8000ae8:	08000b99 	.word	0x08000b99
 8000aec:	08000b99 	.word	0x08000b99
 8000af0:	08000b15 	.word	0x08000b15
 8000af4:	08000b99 	.word	0x08000b99
 8000af8:	08000b99 	.word	0x08000b99
 8000afc:	08000b99 	.word	0x08000b99
 8000b00:	08000b1d 	.word	0x08000b1d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000b04:	4a33      	ldr	r2, [pc, #204]	; (8000bd4 <SystemCoreClockUpdate+0x134>)
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	6013      	str	r3, [r2, #0]
      break;
 8000b0a:	e049      	b.n	8000ba0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <SystemCoreClockUpdate+0x134>)
 8000b0e:	4a32      	ldr	r2, [pc, #200]	; (8000bd8 <SystemCoreClockUpdate+0x138>)
 8000b10:	601a      	str	r2, [r3, #0]
      break;
 8000b12:	e045      	b.n	8000ba0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <SystemCoreClockUpdate+0x134>)
 8000b16:	4a31      	ldr	r2, [pc, #196]	; (8000bdc <SystemCoreClockUpdate+0x13c>)
 8000b18:	601a      	str	r2, [r3, #0]
      break;
 8000b1a:	e041      	b.n	8000ba0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	091b      	lsrs	r3, r3, #4
 8000b30:	f003 0307 	and.w	r3, r3, #7
 8000b34:	3301      	adds	r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d105      	bne.n	8000b4a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000b3e:	4a26      	ldr	r2, [pc, #152]	; (8000bd8 <SystemCoreClockUpdate+0x138>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	e00d      	b.n	8000b66 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d105      	bne.n	8000b5c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000b50:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <SystemCoreClockUpdate+0x13c>)
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	e004      	b.n	8000b66 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b64:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	fb02 f303 	mul.w	r3, r2, r3
 8000b78:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0f5b      	lsrs	r3, r3, #29
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	3301      	adds	r3, #1
 8000b88:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <SystemCoreClockUpdate+0x134>)
 8000b94:	6013      	str	r3, [r2, #0]
      break;
 8000b96:	e003      	b.n	8000ba0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <SystemCoreClockUpdate+0x134>)
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	6013      	str	r3, [r2, #0]
      break;
 8000b9e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	091b      	lsrs	r3, r3, #4
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	4a0c      	ldr	r2, [pc, #48]	; (8000be0 <SystemCoreClockUpdate+0x140>)
 8000bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <SystemCoreClockUpdate+0x134>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <SystemCoreClockUpdate+0x134>)
 8000bc0:	6013      	str	r3, [r2, #0]

}
 8000bc2:	bf00      	nop
 8000bc4:	371c      	adds	r7, #28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	08004980 	.word	0x08004980
 8000bd4:	20000004 	.word	0x20000004
 8000bd8:	00f42400 	.word	0x00f42400
 8000bdc:	01e84800 	.word	0x01e84800
 8000be0:	08004920 	.word	0x08004920

08000be4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000be4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be8:	3304      	adds	r3, #4

08000bea <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bea:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bec:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000bee:	d3f9      	bcc.n	8000be4 <CopyDataInit>
  bx lr
 8000bf0:	4770      	bx	lr

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000bf2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000bf4:	3004      	adds	r0, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000bf6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>
  bx lr
 8000bfa:	4770      	bx	lr

08000bfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000bfe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <LoopForever+0x8>)
 8000c02:	490d      	ldr	r1, [pc, #52]	; (8000c38 <LoopForever+0xc>)
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <LoopForever+0x10>)
 8000c06:	2300      	movs	r3, #0
 8000c08:	f7ff ffef 	bl	8000bea <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LoopForever+0x14>)
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <LoopForever+0x18>)
 8000c10:	2300      	movs	r3, #0
 8000c12:	f7ff fff0 	bl	8000bf6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000c16:	480c      	ldr	r0, [pc, #48]	; (8000c48 <LoopForever+0x1c>)
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <LoopForever+0x20>)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f7ff ffeb 	bl	8000bf6 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c20:	f7ff fee8 	bl	80009f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c24:	f003 fe26 	bl	8004874 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000c28:	f7ff fc59 	bl	80004de <main>

08000c2c <LoopForever>:

LoopForever:
  b LoopForever
 8000c2c:	e7fe      	b.n	8000c2c <LoopForever>
 8000c2e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000c30:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000c34:	20000004 	.word	0x20000004
 8000c38:	20000010 	.word	0x20000010
 8000c3c:	080049d0 	.word	0x080049d0
  INIT_BSS _sbss, _ebss
 8000c40:	20000010 	.word	0x20000010
 8000c44:	20000330 	.word	0x20000330
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000c48:	20030000 	.word	0x20030000
 8000c4c:	20030000 	.word	0x20030000

08000c50 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <HAL_Init+0x3c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <HAL_Init+0x3c>)
 8000c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6a:	2003      	movs	r0, #3
 8000c6c:	f000 f948 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f80f 	bl	8000c94 <HAL_InitTick>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	e001      	b.n	8000c86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c82:	f7ff fe05 	bl	8000890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c86:	79fb      	ldrb	r3, [r7, #7]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	58004000 	.word	0x58004000

08000c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_InitTick+0x6c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d024      	beq.n	8000cf2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8000ca8:	f001 fcfe 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 8000cac:	4602      	mov	r2, r0
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_InitTick+0x6c>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 f950 	bl	8000f66 <HAL_SYSTICK_Config>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d10f      	bne.n	8000cec <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b0f      	cmp	r3, #15
 8000cd0:	d809      	bhi.n	8000ce6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cda:	f000 f91c 	bl	8000f16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cde:	4a09      	ldr	r2, [pc, #36]	; (8000d04 <HAL_InitTick+0x70>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	e007      	b.n	8000cf6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e004      	b.n	8000cf6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e001      	b.n	8000cf6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000000c 	.word	0x2000000c
 8000d04:	20000008 	.word	0x20000008

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	2000000c 	.word	0x2000000c
 8000d2c:	2000032c 	.word	0x2000032c

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	2000032c 	.word	0x2000032c

08000d48 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_GetTickPrio+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4907      	ldr	r1, [pc, #28]	; (8000dfc <__NVIC_EnableIRQ+0x38>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff29 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff40 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff90 	bl	8000e54 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5f 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff33 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa4 	bl	8000ebc <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8e:	e14c      	b.n	800122a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2101      	movs	r1, #1
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 813e 	beq.w	8001224 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d00b      	beq.n	8000fc8 <HAL_GPIO_Init+0x48>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d007      	beq.n	8000fc8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fbc:	2b11      	cmp	r3, #17
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b12      	cmp	r3, #18
 8000fc6:	d130      	bne.n	800102a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ffe:	2201      	movs	r2, #1
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	091b      	lsrs	r3, r3, #4
 8001014:	f003 0201 	and.w	r2, r3, #1
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0xea>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b12      	cmp	r3, #18
 8001068:	d123      	bne.n	80010b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	691a      	ldr	r2, [r3, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	6939      	ldr	r1, [r7, #16]
 80010ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0203 	and.w	r2, r3, #3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 8098 	beq.w	8001224 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80010f4:	4a54      	ldr	r2, [pc, #336]	; (8001248 <HAL_GPIO_Init+0x2c8>)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800111e:	d019      	beq.n	8001154 <HAL_GPIO_Init+0x1d4>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a4a      	ldr	r2, [pc, #296]	; (800124c <HAL_GPIO_Init+0x2cc>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d013      	beq.n	8001150 <HAL_GPIO_Init+0x1d0>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a49      	ldr	r2, [pc, #292]	; (8001250 <HAL_GPIO_Init+0x2d0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d00d      	beq.n	800114c <HAL_GPIO_Init+0x1cc>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a48      	ldr	r2, [pc, #288]	; (8001254 <HAL_GPIO_Init+0x2d4>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d007      	beq.n	8001148 <HAL_GPIO_Init+0x1c8>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a47      	ldr	r2, [pc, #284]	; (8001258 <HAL_GPIO_Init+0x2d8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d101      	bne.n	8001144 <HAL_GPIO_Init+0x1c4>
 8001140:	2304      	movs	r3, #4
 8001142:	e008      	b.n	8001156 <HAL_GPIO_Init+0x1d6>
 8001144:	2307      	movs	r3, #7
 8001146:	e006      	b.n	8001156 <HAL_GPIO_Init+0x1d6>
 8001148:	2303      	movs	r3, #3
 800114a:	e004      	b.n	8001156 <HAL_GPIO_Init+0x1d6>
 800114c:	2302      	movs	r3, #2
 800114e:	e002      	b.n	8001156 <HAL_GPIO_Init+0x1d6>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <HAL_GPIO_Init+0x1d6>
 8001154:	2300      	movs	r3, #0
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	f002 0203 	and.w	r2, r2, #3
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	4093      	lsls	r3, r2
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001166:	4938      	ldr	r1, [pc, #224]	; (8001248 <HAL_GPIO_Init+0x2c8>)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001174:	4b39      	ldr	r3, [pc, #228]	; (800125c <HAL_GPIO_Init+0x2dc>)
 8001176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800119a:	4a30      	ldr	r2, [pc, #192]	; (800125c <HAL_GPIO_Init+0x2dc>)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80011a2:	4b2e      	ldr	r3, [pc, #184]	; (800125c <HAL_GPIO_Init+0x2dc>)
 80011a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011c8:	4a24      	ldr	r2, [pc, #144]	; (800125c <HAL_GPIO_Init+0x2dc>)
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <HAL_GPIO_Init+0x2dc>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011f4:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_GPIO_Init+0x2dc>)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_GPIO_Init+0x2dc>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800121e:	4a0f      	ldr	r2, [pc, #60]	; (800125c <HAL_GPIO_Init+0x2dc>)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	3301      	adds	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	fa22 f303 	lsr.w	r3, r2, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	f47f aeab 	bne.w	8000f90 <HAL_GPIO_Init+0x10>
  }
}
 800123a:	bf00      	nop
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40010000 	.word	0x40010000
 800124c:	48000400 	.word	0x48000400
 8001250:	48000800 	.word	0x48000800
 8001254:	48000c00 	.word	0x48000c00
 8001258:	48001000 	.word	0x48001000
 800125c:	58000800 	.word	0x58000800

08001260 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e001      	b.n	8001282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f806 	bl	80012f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	58000800 	.word	0x58000800

080012f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001308:	b08b      	sub	sp, #44	; 0x2c
 800130a:	af06      	add	r7, sp, #24
 800130c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0ad      	b.n	8001474 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d106      	bne.n	8001332 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff fae7 	bl	8000900 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2203      	movs	r2, #3
 8001336:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fa56 	bl	80047f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	e035      	b.n	80013b6 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	015b      	lsls	r3, r3, #5
 8001350:	4413      	add	r3, r2
 8001352:	3329      	adds	r3, #41	; 0x29
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	4413      	add	r3, r2
 8001360:	3328      	adds	r3, #40	; 0x28
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	b291      	uxth	r1, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	015b      	lsls	r3, r3, #5
 8001370:	4413      	add	r3, r2
 8001372:	3336      	adds	r3, #54	; 0x36
 8001374:	460a      	mov	r2, r1
 8001376:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	015b      	lsls	r3, r3, #5
 800137e:	4413      	add	r3, r2
 8001380:	332b      	adds	r3, #43	; 0x2b
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	015b      	lsls	r3, r3, #5
 800138c:	4413      	add	r3, r2
 800138e:	3338      	adds	r3, #56	; 0x38
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	015b      	lsls	r3, r3, #5
 800139a:	4413      	add	r3, r2
 800139c:	333c      	adds	r3, #60	; 0x3c
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	3302      	adds	r3, #2
 80013a8:	015b      	lsls	r3, r3, #5
 80013aa:	4413      	add	r3, r2
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	3301      	adds	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d3c4      	bcc.n	800134a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	e031      	b.n	800142a <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	015b      	lsls	r3, r3, #5
 80013cc:	4413      	add	r3, r2
 80013ce:	f203 1329 	addw	r3, r3, #297	; 0x129
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	015b      	lsls	r3, r3, #5
 80013dc:	4413      	add	r3, r2
 80013de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	015b      	lsls	r3, r3, #5
 80013ec:	4413      	add	r3, r2
 80013ee:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	015b      	lsls	r3, r3, #5
 80013fc:	4413      	add	r3, r2
 80013fe:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	015b      	lsls	r3, r3, #5
 800140c:	4413      	add	r3, r2
 800140e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	330a      	adds	r3, #10
 800141c:	015b      	lsls	r3, r3, #5
 800141e:	4413      	add	r3, r2
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	3301      	adds	r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	d3c8      	bcc.n	80013c6 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	687e      	ldr	r6, [r7, #4]
 800143c:	466d      	mov	r5, sp
 800143e:	f106 0410 	add.w	r4, r6, #16
 8001442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001446:	6823      	ldr	r3, [r4, #0]
 8001448:	602b      	str	r3, [r5, #0]
 800144a:	1d33      	adds	r3, r6, #4
 800144c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f003 f9eb 	bl	800482a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d102      	bne.n	8001472 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f805 	bl	800147c <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800147c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	58000400 	.word	0x58000400

080014f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <HAL_PWREx_GetVoltageRange+0x18>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	58000400 	.word	0x58000400

0800150c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800151e:	d101      	bne.n	8001524 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_RCC_HSE_EnableBypass>:
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800153e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_RCC_HSE_DisableBypass>:
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800155c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001560:	6013      	str	r3, [r2, #0]
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_RCC_HSE_Enable>:
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800157a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_RCC_HSE_Disable>:
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800158e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_RCC_HSE_IsReady>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80015ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015ba:	d101      	bne.n	80015c0 <LL_RCC_HSE_IsReady+0x18>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <LL_RCC_HSE_IsReady+0x1a>
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_RCC_HSI_Enable>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <LL_RCC_HSI_Disable>:
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80015ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015fc:	6013      	str	r3, [r2, #0]
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_RCC_HSI_IsReady>:
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800160c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161a:	d101      	bne.n	8001620 <LL_RCC_HSI_IsReady+0x18>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <LL_RCC_HSI_IsReady+0x1a>
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_RCC_HSI_SetCalibTrimming>:
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	061b      	lsls	r3, r3, #24
 8001642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_RCC_HSI48_Enable>:
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800165a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_RCC_HSI48_Disable>:
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800167c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_RCC_HSI48_IsReady>:
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d101      	bne.n	80016b2 <LL_RCC_HSI48_IsReady+0x18>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <LL_RCC_HSI48_IsReady+0x1a>
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <LL_RCC_LSE_Enable>:
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_RCC_LSE_Disable>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_RCC_LSE_EnableBypass>:
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_RCC_LSE_DisableBypass>:
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001734:	f023 0304 	bic.w	r3, r3, #4
 8001738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800174a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b02      	cmp	r3, #2
 8001758:	d101      	bne.n	800175e <LL_RCC_LSE_IsReady+0x18>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <LL_RCC_LSE_IsReady+0x1a>
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800176e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d101      	bne.n	80017c6 <LL_RCC_LSI1_IsReady+0x18>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <LL_RCC_LSI1_IsReady+0x1a>
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800181a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b08      	cmp	r3, #8
 8001828:	d101      	bne.n	800182e <LL_RCC_LSI2_IsReady+0x18>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <LL_RCC_LSI2_IsReady+0x1a>
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001856:	4313      	orrs	r3, r2
 8001858:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	6013      	str	r3, [r2, #0]
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d101      	bne.n	80018ba <LL_RCC_MSI_IsReady+0x16>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <LL_RCC_MSI_IsReady+0x18>
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80018f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018fe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2bb0      	cmp	r3, #176	; 0xb0
 8001904:	d901      	bls.n	800190a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001906:	23b0      	movs	r3, #176	; 0xb0
 8001908:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800190a:	687b      	ldr	r3, [r7, #4]
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001932:	4313      	orrs	r3, r2
 8001934:	604b      	str	r3, [r1, #4]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800194a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 0203 	bic.w	r2, r3, #3
 8001954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 030c 	and.w	r3, r3, #12
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800198a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019e6:	f023 020f 	bic.w	r2, r3, #15
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019f2:	4313      	orrs	r3, r2
 80019f4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae8:	6013      	str	r3, [r2, #0]
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b06:	d101      	bne.n	8001b0c <LL_RCC_PLL_IsReady+0x18>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <LL_RCC_PLL_IsReady+0x1a>
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8c:	d101      	bne.n	8001b92 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bb2:	d101      	bne.n	8001bb8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bcc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d101      	bne.n	8001bde <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bfc:	d101      	bne.n	8001c02 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c20:	d101      	bne.n	8001c26 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b08d      	sub	sp, #52	; 0x34
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e386      	b.n	8002354 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 808f 	beq.w	8001d72 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c54:	f7ff fe89 	bl	800196a <LL_RCC_GetSysClkSource>
 8001c58:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c5a:	f7ff ff82 	bl	8001b62 <LL_RCC_PLL_GetMainSource>
 8001c5e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_RCC_OscConfig+0x3e>
 8001c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	d149      	bne.n	8001d00 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d146      	bne.n	8001d00 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c72:	f7ff fe17 	bl	80018a4 <LL_RCC_MSI_IsReady>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_OscConfig+0x54>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e365      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001c8c:	f7ff fe2f 	bl	80018ee <LL_RCC_MSI_GetRange>
 8001c90:	4603      	mov	r3, r0
 8001c92:	429c      	cmp	r4, r3
 8001c94:	d914      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fd44 	bl	8002728 <RCC_SetFlashLatencyFromMSIRange>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e354      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fe09 	bl	80018c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fe2d 	bl	8001918 <LL_RCC_MSI_SetCalibTrimming>
 8001cbe:	e013      	b.n	8001ce8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fdfe 	bl	80018c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fe22 	bl	8001918 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fd25 	bl	8002728 <RCC_SetFlashLatencyFromMSIRange>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e335      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8001ce8:	f7fe feda 	bl	8000aa0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cec:	4bb4      	ldr	r3, [pc, #720]	; (8001fc0 <HAL_RCC_OscConfig+0x38c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe ffcf 	bl	8000c94 <HAL_InitTick>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d039      	beq.n	8001d70 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e329      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01e      	beq.n	8001d46 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d08:	f7ff fdae 	bl	8001868 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f810 	bl	8000d30 <HAL_GetTick>
 8001d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d14:	f7ff f80c 	bl	8000d30 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e316      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d26:	f7ff fdbd 	bl	80018a4 <LL_RCC_MSI_IsReady>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f1      	beq.n	8001d14 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fdc6 	bl	80018c6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fdea 	bl	8001918 <LL_RCC_MSI_SetCalibTrimming>
 8001d44:	e015      	b.n	8001d72 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d46:	f7ff fd9e 	bl	8001886 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d4a:	f7fe fff1 	bl	8000d30 <HAL_GetTick>
 8001d4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d52:	f7fe ffed 	bl	8000d30 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e2f7      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d64:	f7ff fd9e 	bl	80018a4 <LL_RCC_MSI_IsReady>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f1      	bne.n	8001d52 <HAL_RCC_OscConfig+0x11e>
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d05a      	beq.n	8001e34 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7e:	f7ff fdf4 	bl	800196a <LL_RCC_GetSysClkSource>
 8001d82:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d84:	f7ff feed 	bl	8001b62 <LL_RCC_PLL_GetMainSource>
 8001d88:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_OscConfig+0x168>
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d10d      	bne.n	8001db2 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d10a      	bne.n	8001db2 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	f7ff fc04 	bl	80015a8 <LL_RCC_HSE_IsReady>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d045      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1fe>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d141      	bne.n	8001e32 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e2d0      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dba:	d102      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x18e>
 8001dbc:	f7ff fbd6 	bl	800156c <LL_RCC_HSE_Enable>
 8001dc0:	e00d      	b.n	8001dde <HAL_RCC_OscConfig+0x1aa>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dca:	d104      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x1a2>
 8001dcc:	f7ff fbb0 	bl	8001530 <LL_RCC_HSE_EnableBypass>
 8001dd0:	f7ff fbcc 	bl	800156c <LL_RCC_HSE_Enable>
 8001dd4:	e003      	b.n	8001dde <HAL_RCC_OscConfig+0x1aa>
 8001dd6:	f7ff fbd8 	bl	800158a <LL_RCC_HSE_Disable>
 8001dda:	f7ff fbb8 	bl	800154e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d012      	beq.n	8001e0c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de6:	f7fe ffa3 	bl	8000d30 <HAL_GetTick>
 8001dea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dee:	f7fe ff9f 	bl	8000d30 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b64      	cmp	r3, #100	; 0x64
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e2a9      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e00:	f7ff fbd2 	bl	80015a8 <LL_RCC_HSE_IsReady>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f1      	beq.n	8001dee <HAL_RCC_OscConfig+0x1ba>
 8001e0a:	e013      	b.n	8001e34 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7fe ff90 	bl	8000d30 <HAL_GetTick>
 8001e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7fe ff8c 	bl	8000d30 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e296      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e26:	f7ff fbbf 	bl	80015a8 <LL_RCC_HSE_IsReady>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f1      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1e0>
 8001e30:	e000      	b.n	8001e34 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d051      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e40:	f7ff fd93 	bl	800196a <LL_RCC_GetSysClkSource>
 8001e44:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e46:	f7ff fe8c 	bl	8001b62 <LL_RCC_PLL_GetMainSource>
 8001e4a:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d005      	beq.n	8001e5e <HAL_RCC_OscConfig+0x22a>
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d113      	bne.n	8001e80 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d110      	bne.n	8001e80 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e5e:	f7ff fbd3 	bl	8001608 <LL_RCC_HSI_IsReady>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_OscConfig+0x240>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e26f      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fbd7 	bl	800162c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e7e:	e031      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d019      	beq.n	8001ebc <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e88:	f7ff fba0 	bl	80015cc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7fe ff50 	bl	8000d30 <HAL_GetTick>
 8001e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e94:	f7fe ff4c 	bl	8000d30 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e256      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ea6:	f7ff fbaf 	bl	8001608 <LL_RCC_HSI_IsReady>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f1      	beq.n	8001e94 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fbb9 	bl	800162c <LL_RCC_HSI_SetCalibTrimming>
 8001eba:	e013      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ebc:	f7ff fb95 	bl	80015ea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7fe ff36 	bl	8000d30 <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7fe ff32 	bl	8000d30 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e23c      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001eda:	f7ff fb95 	bl	8001608 <LL_RCC_HSI_IsReady>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f1      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80a2 	beq.w	8002042 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d075      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d046      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001f12:	f7ff fc4c 	bl	80017ae <LL_RCC_LSI1_IsReady>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d113      	bne.n	8001f44 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001f1c:	f7ff fc25 	bl	800176a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f20:	f7fe ff06 	bl	8000d30 <HAL_GetTick>
 8001f24:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f28:	f7fe ff02 	bl	8000d30 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e20c      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f3a:	f7ff fc38 	bl	80017ae <LL_RCC_LSI1_IsReady>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f1      	beq.n	8001f28 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001f44:	f7ff fc45 	bl	80017d2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe fef2 	bl	8000d30 <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f50:	f7fe feee 	bl	8000d30 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1f8      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f62:	f7ff fc58 	bl	8001816 <LL_RCC_LSI2_IsReady>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f1      	beq.n	8001f50 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fc62 	bl	800183a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001f76:	f7ff fc09 	bl	800178c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7fe fed9 	bl	8000d30 <HAL_GetTick>
 8001f7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f82:	f7fe fed5 	bl	8000d30 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e1df      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f94:	f7ff fc0b 	bl	80017ae <LL_RCC_LSI1_IsReady>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f1      	bne.n	8001f82 <HAL_RCC_OscConfig+0x34e>
 8001f9e:	e050      	b.n	8002042 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001fa0:	f7ff fbe3 	bl	800176a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fec4 	bl	8000d30 <HAL_GetTick>
 8001fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001fac:	f7fe fec0 	bl	8000d30 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d904      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1ca      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
 8001fbe:	bf00      	nop
 8001fc0:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001fc4:	f7ff fbf3 	bl	80017ae <LL_RCC_LSI1_IsReady>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0ee      	beq.n	8001fac <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001fce:	f7ff fc11 	bl	80017f4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001fd4:	f7fe feac 	bl	8000d30 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1b6      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001fe6:	f7ff fc16 	bl	8001816 <LL_RCC_LSI2_IsReady>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f1      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x3a0>
 8001ff0:	e027      	b.n	8002042 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001ff2:	f7ff fbff 	bl	80017f4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fe9b 	bl	8000d30 <HAL_GetTick>
 8001ffa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ffe:	f7fe fe97 	bl	8000d30 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b03      	cmp	r3, #3
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1a1      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002010:	f7ff fc01 	bl	8001816 <LL_RCC_LSI2_IsReady>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f1      	bne.n	8001ffe <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800201a:	f7ff fbb7 	bl	800178c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7fe fe87 	bl	8000d30 <HAL_GetTick>
 8002022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002026:	f7fe fe83 	bl	8000d30 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e18d      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002038:	f7ff fbb9 	bl	80017ae <LL_RCC_LSI1_IsReady>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f1      	bne.n	8002026 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	d05b      	beq.n	8002106 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204e:	4bb5      	ldr	r3, [pc, #724]	; (8002324 <HAL_RCC_OscConfig+0x6f0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d114      	bne.n	8002084 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800205a:	f7ff fa39 	bl	80014d0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205e:	f7fe fe67 	bl	8000d30 <HAL_GetTick>
 8002062:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002066:	f7fe fe63 	bl	8000d30 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e16d      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002078:	4baa      	ldr	r3, [pc, #680]	; (8002324 <HAL_RCC_OscConfig+0x6f0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d102      	bne.n	8002092 <HAL_RCC_OscConfig+0x45e>
 800208c:	f7ff fb17 	bl	80016be <LL_RCC_LSE_Enable>
 8002090:	e00c      	b.n	80020ac <HAL_RCC_OscConfig+0x478>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b05      	cmp	r3, #5
 8002098:	d104      	bne.n	80020a4 <HAL_RCC_OscConfig+0x470>
 800209a:	f7ff fb32 	bl	8001702 <LL_RCC_LSE_EnableBypass>
 800209e:	f7ff fb0e 	bl	80016be <LL_RCC_LSE_Enable>
 80020a2:	e003      	b.n	80020ac <HAL_RCC_OscConfig+0x478>
 80020a4:	f7ff fb1c 	bl	80016e0 <LL_RCC_LSE_Disable>
 80020a8:	f7ff fb3c 	bl	8001724 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d014      	beq.n	80020de <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b4:	f7fe fe3c 	bl	8000d30 <HAL_GetTick>
 80020b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020bc:	f7fe fe38 	bl	8000d30 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e140      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 80020d2:	f7ff fb38 	bl	8001746 <LL_RCC_LSE_IsReady>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0ef      	beq.n	80020bc <HAL_RCC_OscConfig+0x488>
 80020dc:	e013      	b.n	8002106 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020de:	f7fe fe27 	bl	8000d30 <HAL_GetTick>
 80020e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe fe23 	bl	8000d30 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e12b      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 80020fc:	f7ff fb23 	bl	8001746 <LL_RCC_LSE_IsReady>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ef      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d02c      	beq.n	800216c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	2b00      	cmp	r3, #0
 8002118:	d014      	beq.n	8002144 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800211a:	f7ff fa9c 	bl	8001656 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211e:	f7fe fe07 	bl	8000d30 <HAL_GetTick>
 8002122:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002126:	f7fe fe03 	bl	8000d30 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e10d      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002138:	f7ff faaf 	bl	800169a <LL_RCC_HSI48_IsReady>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f1      	beq.n	8002126 <HAL_RCC_OscConfig+0x4f2>
 8002142:	e013      	b.n	800216c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002144:	f7ff fa98 	bl	8001678 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7fe fdf2 	bl	8000d30 <HAL_GetTick>
 800214c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002150:	f7fe fdee 	bl	8000d30 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e0f8      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002162:	f7ff fa9a 	bl	800169a <LL_RCC_HSI48_IsReady>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f1      	bne.n	8002150 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80ee 	beq.w	8002352 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002176:	f7ff fbf8 	bl	800196a <LL_RCC_GetSysClkSource>
 800217a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	2b02      	cmp	r3, #2
 800218a:	f040 80af 	bne.w	80022ec <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 0203 	and.w	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	429a      	cmp	r2, r3
 800219a:	d123      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d11c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d114      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d10d      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d106      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d05d      	beq.n	80022a0 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d058      	beq.n	800229c <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0ab      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021fc:	f7ff fc6b 	bl	8001ad6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002200:	f7fe fd96 	bl	8000d30 <HAL_GetTick>
 8002204:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fd92 	bl	8000d30 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e09c      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ef      	bne.n	8002208 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	4b3e      	ldr	r3, [pc, #248]	; (8002328 <HAL_RCC_OscConfig+0x6f4>)
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800223a:	4311      	orrs	r1, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002240:	0212      	lsls	r2, r2, #8
 8002242:	4311      	orrs	r1, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002248:	4311      	orrs	r1, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800224e:	4311      	orrs	r1, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002254:	430a      	orrs	r2, r1
 8002256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800225a:	4313      	orrs	r3, r2
 800225c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800225e:	f7ff fc2b 	bl	8001ab8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002270:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002272:	f7fe fd5d 	bl	8000d30 <HAL_GetTick>
 8002276:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227a:	f7fe fd59 	bl	8000d30 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e063      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0ef      	beq.n	800227a <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800229a:	e05a      	b.n	8002352 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e059      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d151      	bne.n	8002352 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022ae:	f7ff fc03 	bl	8001ab8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022c2:	f7fe fd35 	bl	8000d30 <HAL_GetTick>
 80022c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ca:	f7fe fd31 	bl	8000d30 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e03b      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0ef      	beq.n	80022ca <HAL_RCC_OscConfig+0x696>
 80022ea:	e032      	b.n	8002352 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	d02d      	beq.n	800234e <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f2:	f7ff fbf0 	bl	8001ad6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80022f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002300:	f023 0303 	bic.w	r3, r3, #3
 8002304:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002310:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002318:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231a:	f7fe fd09 	bl	8000d30 <HAL_GetTick>
 800231e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002320:	e00d      	b.n	800233e <HAL_RCC_OscConfig+0x70a>
 8002322:	bf00      	nop
 8002324:	58000400 	.word	0x58000400
 8002328:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7fe fd00 	bl	8000d30 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1ef      	bne.n	800232c <HAL_RCC_OscConfig+0x6f8>
 800234c:	e001      	b.n	8002352 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3734      	adds	r7, #52	; 0x34
 8002358:	46bd      	mov	sp, r7
 800235a:	bd90      	pop	{r4, r7, pc}

0800235c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e12a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002370:	4b97      	ldr	r3, [pc, #604]	; (80025d0 <HAL_RCC_ClockConfig+0x274>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d91b      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b94      	ldr	r3, [pc, #592]	; (80025d0 <HAL_RCC_ClockConfig+0x274>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4992      	ldr	r1, [pc, #584]	; (80025d0 <HAL_RCC_ClockConfig+0x274>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800238e:	f7fe fccf 	bl	8000d30 <HAL_GetTick>
 8002392:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002396:	f7fe fccb 	bl	8000d30 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e10e      	b.n	80025c6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a8:	4b89      	ldr	r3, [pc, #548]	; (80025d0 <HAL_RCC_ClockConfig+0x274>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d1ef      	bne.n	8002396 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d016      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fadb 	bl	8001982 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023cc:	f7fe fcb0 	bl	8000d30 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023d4:	f7fe fcac 	bl	8000d30 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0ef      	b.n	80025c6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80023e6:	f7ff fbc8 	bl	8001b7a <LL_RCC_IsActiveFlag_HPRE>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f1      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d016      	beq.n	800242a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fad2 	bl	80019aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002406:	f7fe fc93 	bl	8000d30 <HAL_GetTick>
 800240a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800240e:	f7fe fc8f 	bl	8000d30 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0d2      	b.n	80025c6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002420:	f7ff fbbd 	bl	8001b9e <LL_RCC_IsActiveFlag_C2HPRE>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f1      	beq.n	800240e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d016      	beq.n	8002464 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff facb 	bl	80019d6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002440:	f7fe fc76 	bl	8000d30 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002448:	f7fe fc72 	bl	8000d30 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e0b5      	b.n	80025c6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800245a:	f7ff fbb3 	bl	8001bc4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f1      	beq.n	8002448 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d016      	beq.n	800249e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fac5 	bl	8001a04 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800247a:	f7fe fc59 	bl	8000d30 <HAL_GetTick>
 800247e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002482:	f7fe fc55 	bl	8000d30 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e098      	b.n	80025c6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002494:	f7ff fba9 	bl	8001bea <LL_RCC_IsActiveFlag_PPRE1>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f1      	beq.n	8002482 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d017      	beq.n	80024da <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fabb 	bl	8001a2c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024b6:	f7fe fc3b 	bl	8000d30 <HAL_GetTick>
 80024ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024be:	f7fe fc37 	bl	8000d30 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e07a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024d0:	f7ff fb9d 	bl	8001c0e <LL_RCC_IsActiveFlag_PPRE2>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f1      	beq.n	80024be <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d043      	beq.n	800256e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d106      	bne.n	80024fc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80024ee:	f7ff f85b 	bl	80015a8 <LL_RCC_HSE_IsReady>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d11e      	bne.n	8002536 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e064      	b.n	80025c6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d106      	bne.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002504:	f7ff faf6 	bl	8001af4 <LL_RCC_PLL_IsReady>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d113      	bne.n	8002536 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e059      	b.n	80025c6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800251a:	f7ff f9c3 	bl	80018a4 <LL_RCC_MSI_IsReady>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d108      	bne.n	8002536 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e04e      	b.n	80025c6 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002528:	f7ff f86e 	bl	8001608 <LL_RCC_HSI_IsReady>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e047      	b.n	80025c6 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fa01 	bl	8001942 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002540:	f7fe fbf6 	bl	8000d30 <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	e00a      	b.n	800255e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe fbf2 	bl	8000d30 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e033      	b.n	80025c6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	f7ff fa04 	bl	800196a <LL_RCC_GetSysClkSource>
 8002562:	4602      	mov	r2, r0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	429a      	cmp	r2, r3
 800256c:	d1ec      	bne.n	8002548 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_RCC_ClockConfig+0x274>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d21b      	bcs.n	80025b4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_RCC_ClockConfig+0x274>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 0207 	bic.w	r2, r3, #7
 8002584:	4912      	ldr	r1, [pc, #72]	; (80025d0 <HAL_RCC_ClockConfig+0x274>)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258c:	f7fe fbd0 	bl	8000d30 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002594:	f7fe fbcc 	bl	8000d30 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e00f      	b.n	80025c6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_RCC_ClockConfig+0x274>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1ef      	bne.n	8002594 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80025b4:	f7fe fa74 	bl	8000aa0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80025b8:	f7fe fbc6 	bl	8000d48 <HAL_GetTickPrio>
 80025bc:	4603      	mov	r3, r0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fb68 	bl	8000c94 <HAL_InitTick>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	58004000 	.word	0x58004000

080025d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025da:	f7ff f9c6 	bl	800196a <LL_RCC_GetSysClkSource>
 80025de:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10a      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80025e6:	f7ff f982 	bl	80018ee <LL_RCC_MSI_GetRange>
 80025ea:	4603      	mov	r3, r0
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	4a2a      	ldr	r2, [pc, #168]	; (800269c <HAL_RCC_GetSysClockFreq+0xc8>)
 80025f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e04a      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d102      	bne.n	8002608 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002602:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	e044      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b08      	cmp	r3, #8
 800260c:	d10a      	bne.n	8002624 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800260e:	f7fe ff7d 	bl	800150c <LL_RCC_HSE_IsEnabledDiv2>
 8002612:	4603      	mov	r3, r0
 8002614:	2b01      	cmp	r3, #1
 8002616:	d102      	bne.n	800261e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002618:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	e039      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800261e:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	e036      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002624:	f7ff fa9d 	bl	8001b62 <LL_RCC_PLL_GetMainSource>
 8002628:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d002      	beq.n	8002636 <HAL_RCC_GetSysClockFreq+0x62>
 8002630:	2b03      	cmp	r3, #3
 8002632:	d003      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x68>
 8002634:	e00d      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002638:	60bb      	str	r3, [r7, #8]
        break;
 800263a:	e015      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800263c:	f7fe ff66 	bl	800150c <LL_RCC_HSE_IsEnabledDiv2>
 8002640:	4603      	mov	r3, r0
 8002642:	2b01      	cmp	r3, #1
 8002644:	d102      	bne.n	800264c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002648:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800264a:	e00d      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800264e:	60bb      	str	r3, [r7, #8]
        break;
 8002650:	e00a      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002652:	f7ff f94c 	bl	80018ee <LL_RCC_MSI_GetRange>
 8002656:	4603      	mov	r3, r0
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	4a0f      	ldr	r2, [pc, #60]	; (800269c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002664:	60bb      	str	r3, [r7, #8]
        break;
 8002666:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002668:	f7ff fa56 	bl	8001b18 <LL_RCC_PLL_GetN>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	fb03 f402 	mul.w	r4, r3, r2
 8002674:	f7ff fa69 	bl	8001b4a <LL_RCC_PLL_GetDivider>
 8002678:	4603      	mov	r3, r0
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	3301      	adds	r3, #1
 800267e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002682:	f7ff fa56 	bl	8001b32 <LL_RCC_PLL_GetR>
 8002686:	4603      	mov	r3, r0
 8002688:	0f5b      	lsrs	r3, r3, #29
 800268a:	3301      	adds	r3, #1
 800268c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002690:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bd90      	pop	{r4, r7, pc}
 800269c:	08004980 	.word	0x08004980
 80026a0:	00f42400 	.word	0x00f42400
 80026a4:	01e84800 	.word	0x01e84800

080026a8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a8:	b598      	push	{r3, r4, r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80026ac:	f7ff ff92 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 80026b0:	4604      	mov	r4, r0
 80026b2:	f7ff f9cf 	bl	8001a54 <LL_RCC_GetAHBPrescaler>
 80026b6:	4603      	mov	r3, r0
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	4a03      	ldr	r2, [pc, #12]	; (80026cc <HAL_RCC_GetHCLKFreq+0x24>)
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd98      	pop	{r3, r4, r7, pc}
 80026cc:	08004920 	.word	0x08004920

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b598      	push	{r3, r4, r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026d4:	f7ff ffe8 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026d8:	4604      	mov	r4, r0
 80026da:	f7ff f9d5 	bl	8001a88 <LL_RCC_GetAPB1Prescaler>
 80026de:	4603      	mov	r3, r0
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd98      	pop	{r3, r4, r7, pc}
 80026f8:	08004960 	.word	0x08004960

080026fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026fc:	b598      	push	{r3, r4, r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002700:	f7ff ffd2 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 8002704:	4604      	mov	r4, r0
 8002706:	f7ff f9cb 	bl	8001aa0 <LL_RCC_GetAPB2Prescaler>
 800270a:	4603      	mov	r3, r0
 800270c:	0adb      	lsrs	r3, r3, #11
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	4a04      	ldr	r2, [pc, #16]	; (8002724 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd98      	pop	{r3, r4, r7, pc}
 8002724:	08004960 	.word	0x08004960

08002728 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2bb0      	cmp	r3, #176	; 0xb0
 8002734:	d903      	bls.n	800273e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e007      	b.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	4a11      	ldr	r2, [pc, #68]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800274e:	f7ff f98d 	bl	8001a6c <LL_RCC_GetAHB4Prescaler>
 8002752:	4603      	mov	r3, r0
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	4a0d      	ldr	r2, [pc, #52]	; (8002790 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	0c9c      	lsrs	r4, r3, #18
 8002772:	f7fe febd 	bl	80014f0 <HAL_PWREx_GetVoltageRange>
 8002776:	4603      	mov	r3, r0
 8002778:	4619      	mov	r1, r3
 800277a:	4620      	mov	r0, r4
 800277c:	f000 f80c 	bl	8002798 <RCC_SetFlashLatency>
 8002780:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bd90      	pop	{r4, r7, pc}
 800278a:	bf00      	nop
 800278c:	08004980 	.word	0x08004980
 8002790:	08004920 	.word	0x08004920
 8002794:	431bde83 	.word	0x431bde83

08002798 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b093      	sub	sp, #76	; 0x4c
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <RCC_SetFlashLatency+0xf0>)
 80027a4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80027a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80027ae:	4a37      	ldr	r2, [pc, #220]	; (800288c <RCC_SetFlashLatency+0xf4>)
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80027b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80027ba:	4b35      	ldr	r3, [pc, #212]	; (8002890 <RCC_SetFlashLatency+0xf8>)
 80027bc:	f107 040c 	add.w	r4, r7, #12
 80027c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027c6:	2300      	movs	r3, #0
 80027c8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d0:	d11c      	bne.n	800280c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	643b      	str	r3, [r7, #64]	; 0x40
 80027d6:	e015      	b.n	8002804 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80027d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027e0:	4413      	add	r3, r2
 80027e2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d808      	bhi.n	80027fe <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027f4:	4413      	add	r3, r2
 80027f6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027fa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80027fc:	e022      	b.n	8002844 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002800:	3301      	adds	r3, #1
 8002802:	643b      	str	r3, [r7, #64]	; 0x40
 8002804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002806:	2b03      	cmp	r3, #3
 8002808:	d9e6      	bls.n	80027d8 <RCC_SetFlashLatency+0x40>
 800280a:	e01b      	b.n	8002844 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800280c:	2300      	movs	r3, #0
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002810:	e015      	b.n	800283e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800281a:	4413      	add	r3, r2
 800281c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	d808      	bhi.n	8002838 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800282e:	4413      	add	r3, r2
 8002830:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002834:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002836:	e005      	b.n	8002844 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800283a:	3301      	adds	r3, #1
 800283c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800283e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002840:	2b02      	cmp	r3, #2
 8002842:	d9e6      	bls.n	8002812 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <RCC_SetFlashLatency+0xfc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 0207 	bic.w	r2, r3, #7
 800284c:	4911      	ldr	r1, [pc, #68]	; (8002894 <RCC_SetFlashLatency+0xfc>)
 800284e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002854:	f7fe fa6c 	bl	8000d30 <HAL_GetTick>
 8002858:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800285a:	e008      	b.n	800286e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800285c:	f7fe fa68 	bl	8000d30 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e007      	b.n	800287e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <RCC_SetFlashLatency+0xfc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002878:	429a      	cmp	r2, r3
 800287a:	d1ef      	bne.n	800285c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	374c      	adds	r7, #76	; 0x4c
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}
 8002886:	bf00      	nop
 8002888:	080048e4 	.word	0x080048e4
 800288c:	080048f4 	.word	0x080048f4
 8002890:	08004900 	.word	0x08004900
 8002894:	58004000 	.word	0x58004000

08002898 <LL_RCC_LSE_IsEnabled>:
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <LL_RCC_LSE_IsEnabled+0x18>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <LL_RCC_LSE_IsEnabled+0x1a>
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_RCC_LSE_IsReady>:
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d101      	bne.n	80028d4 <LL_RCC_LSE_IsReady+0x18>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <LL_RCC_LSE_IsReady+0x1a>
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_RCC_MSI_EnablePLLMode>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80028e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6013      	str	r3, [r2, #0]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_RCC_SetRFWKPClockSource>:
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_RCC_SetSMPSClockSource>:
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	f023 0203 	bic.w	r2, r3, #3
 800293c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4313      	orrs	r3, r2
 8002944:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_RCC_SetSMPSPrescaler>:
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002964:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4313      	orrs	r3, r2
 800296c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_RCC_SetUSARTClockSource>:
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f023 0203 	bic.w	r2, r3, #3
 800298e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_RCC_SetLPUARTClockSource>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80029ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <LL_RCC_SetI2CClockSource>:
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80029da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80029ea:	43db      	mvns	r3, r3
 80029ec:	401a      	ands	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80029f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_RCC_SetLPTIMClockSource>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	0c1b      	lsrs	r3, r3, #16
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	43db      	mvns	r3, r3
 8002a24:	401a      	ands	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	041b      	lsls	r3, r3, #16
 8002a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_RCC_SetSAIClockSource>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_RCC_SetRNGClockSource>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_RCC_SetCLK48ClockSource>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_RCC_SetUSBClockSource>:
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ffe3 	bl	8002a98 <LL_RCC_SetCLK48ClockSource>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <LL_RCC_SetADCClockSource>:
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_RCC_SetRTCClockSource>:
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <LL_RCC_GetRTCClockSource>:
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_RCC_ForceBackupDomainReset>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_RCC_ReleaseBackupDomainReset>:
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_PLLSAI1_Enable>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ba2:	6013      	str	r3, [r2, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <LL_RCC_PLLSAI1_Disable>:
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bc0:	6013      	str	r3, [r2, #0]
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_RCC_PLLSAI1_IsReady>:
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bde:	d101      	bne.n	8002be4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d033      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c14:	d00c      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c1a:	d802      	bhi.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d010      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c20:	e017      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002c22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c26:	d017      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002c28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c2c:	d016      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002c2e:	e010      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c40:	e00d      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3304      	adds	r3, #4
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f94d 	bl	8002ee6 <RCCEx_PLLSAI1_ConfigNP>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c50:	e005      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	77fb      	strb	r3, [r7, #31]
        break;
 8002c56:	e002      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002c58:	bf00      	nop
 8002c5a:	e000      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c5e:	7ffb      	ldrb	r3, [r7, #31]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fee9 	bl	8002a40 <LL_RCC_SetSAIClockSource>
 8002c6e:	e001      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c70:	7ffb      	ldrb	r3, [r7, #31]
 8002c72:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d046      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002c80:	f7ff ff57 	bl	8002b32 <LL_RCC_GetRTCClockSource>
 8002c84:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d03c      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c90:	f7fe fc1e 	bl	80014d0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d105      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff ff31 	bl	8002b06 <LL_RCC_SetRTCClockSource>
 8002ca4:	e02e      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002cb0:	f7ff ff4c 	bl	8002b4c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002cb4:	f7ff ff5b 	bl	8002b6e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002cd0:	f7ff fde2 	bl	8002898 <LL_RCC_LSE_IsEnabled>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d114      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cda:	f7fe f829 	bl	8000d30 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002ce0:	e00b      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7fe f825 	bl	8000d30 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d902      	bls.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	77fb      	strb	r3, [r7, #31]
              break;
 8002cf8:	e004      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002cfa:	f7ff fddf 	bl	80028bc <LL_RCC_LSE_IsReady>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d1ee      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002d04:	7ffb      	ldrb	r3, [r7, #31]
 8002d06:	77bb      	strb	r3, [r7, #30]
 8002d08:	e001      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d004      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fe2b 	bl	800297a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fe36 	bl	80029a6 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d004      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fe5e 	bl	8002a0c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d004      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fe53 	bl	8002a0c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fe2b 	bl	80029d2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d004      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fe20 	bl	80029d2 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d022      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fe8e 	bl	8002ac4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dca:	d10b      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f8e3 	bl	8002f9c <RCCEx_PLLSAI1_ConfigNQ>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002dda:	7ffb      	ldrb	r3, [r7, #31]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8002de0:	7ffb      	ldrb	r3, [r7, #31]
 8002de2:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d02b      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d008      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e02:	d003      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fe2b 	bl	8002a6c <LL_RCC_SetRNGClockSource>
 8002e16:	e00a      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7ff fe22 	bl	8002a6c <LL_RCC_SetRNGClockSource>
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7ff fe35 	bl	8002a98 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002e36:	d107      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d022      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fe3e 	bl	8002ada <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e66:	d107      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e76:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e80:	d10b      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3304      	adds	r3, #4
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f8e3 	bl	8003052 <RCCEx_PLLSAI1_ConfigNR>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002e90:	7ffb      	ldrb	r3, [r7, #31]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8002e96:	7ffb      	ldrb	r3, [r7, #31]
 8002e98:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d004      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fd27 	bl	80028fe <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d009      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fd46 	bl	8002952 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fd2d 	bl	800292a <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8002ed0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8002ede:	f7ff fcff 	bl	80028e0 <LL_RCC_MSI_EnablePLLMode>
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002ef2:	f7ff fe5c 	bl	8002bae <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ef6:	f7fd ff1b 	bl	8000d30 <HAL_GetTick>
 8002efa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002efc:	e009      	b.n	8002f12 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002efe:	f7fd ff17 	bl	8000d30 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d902      	bls.n	8002f12 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f10:	e004      	b.n	8002f1c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f12:	f7ff fe5b 	bl	8002bcc <LL_RCC_PLLSAI1_IsReady>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f0      	bne.n	8002efe <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d137      	bne.n	8002f92 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f36:	4313      	orrs	r3, r2
 8002f38:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f50:	f7ff fe1e 	bl	8002b90 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f54:	f7fd feec 	bl	8000d30 <HAL_GetTick>
 8002f58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f5a:	e009      	b.n	8002f70 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f5c:	f7fd fee8 	bl	8000d30 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d902      	bls.n	8002f70 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f6e:	e004      	b.n	8002f7a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f70:	f7ff fe2c 	bl	8002bcc <LL_RCC_PLLSAI1_IsReady>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d1f0      	bne.n	8002f5c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d108      	bne.n	8002f92 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002fa8:	f7ff fe01 	bl	8002bae <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002fac:	f7fd fec0 	bl	8000d30 <HAL_GetTick>
 8002fb0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fb2:	e009      	b.n	8002fc8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fb4:	f7fd febc 	bl	8000d30 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d902      	bls.n	8002fc8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc6:	e004      	b.n	8002fd2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fc8:	f7ff fe00 	bl	8002bcc <LL_RCC_PLLSAI1_IsReady>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d137      	bne.n	8003048 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fec:	4313      	orrs	r3, r2
 8002fee:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003002:	4313      	orrs	r3, r2
 8003004:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003006:	f7ff fdc3 	bl	8002b90 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300a:	f7fd fe91 	bl	8000d30 <HAL_GetTick>
 800300e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003010:	e009      	b.n	8003026 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003012:	f7fd fe8d 	bl	8000d30 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d902      	bls.n	8003026 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	73fb      	strb	r3, [r7, #15]
        break;
 8003024:	e004      	b.n	8003030 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003026:	f7ff fdd1 	bl	8002bcc <LL_RCC_PLLSAI1_IsReady>
 800302a:	4603      	mov	r3, r0
 800302c:	2b01      	cmp	r3, #1
 800302e:	d1f0      	bne.n	8003012 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d108      	bne.n	8003048 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003044:	4313      	orrs	r3, r2
 8003046:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800305e:	f7ff fda6 	bl	8002bae <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003062:	f7fd fe65 	bl	8000d30 <HAL_GetTick>
 8003066:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003068:	e009      	b.n	800307e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800306a:	f7fd fe61 	bl	8000d30 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d902      	bls.n	800307e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	73fb      	strb	r3, [r7, #15]
      break;
 800307c:	e004      	b.n	8003088 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800307e:	f7ff fda5 	bl	8002bcc <LL_RCC_PLLSAI1_IsReady>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d137      	bne.n	80030fe <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800308e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030a2:	4313      	orrs	r3, r2
 80030a4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030b8:	4313      	orrs	r3, r2
 80030ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80030bc:	f7ff fd68 	bl	8002b90 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c0:	f7fd fe36 	bl	8000d30 <HAL_GetTick>
 80030c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030c6:	e009      	b.n	80030dc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030c8:	f7fd fe32 	bl	8000d30 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d902      	bls.n	80030dc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	73fb      	strb	r3, [r7, #15]
        break;
 80030da:	e004      	b.n	80030e6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030dc:	f7ff fd76 	bl	8002bcc <LL_RCC_PLLSAI1_IsReady>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d1f0      	bne.n	80030c8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d108      	bne.n	80030fe <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80030ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030fa:	4313      	orrs	r3, r2
 80030fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <LL_RCC_GetUSARTClockSource>:
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003114:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4013      	ands	r3, r2
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_RCC_GetLPUARTClockSource>:
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003134:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4013      	ands	r3, r2
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e042      	b.n	80031e0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003160:	2b00      	cmp	r3, #0
 8003162:	d106      	bne.n	8003172 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7fd fb97 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2224      	movs	r2, #36	; 0x24
 8003176:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f82c 	bl	80031e8 <UART_SetConfig>
 8003190:	4603      	mov	r3, r0
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e022      	b.n	80031e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f001 f884 	bl	80042b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f001 f90b 	bl	80043f4 <UART_CheckIdleState>
 80031de:	4603      	mov	r3, r0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80031ec:	b08a      	sub	sp, #40	; 0x28
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	4313      	orrs	r3, r2
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321c:	4313      	orrs	r3, r2
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4ba4      	ldr	r3, [pc, #656]	; (80034b8 <UART_SetConfig+0x2d0>)
 8003228:	4013      	ands	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003230:	430b      	orrs	r3, r1
 8003232:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a99      	ldr	r2, [pc, #612]	; (80034bc <UART_SetConfig+0x2d4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003260:	4313      	orrs	r3, r2
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800326e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003278:	430b      	orrs	r3, r1
 800327a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	f023 010f 	bic.w	r1, r3, #15
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a8a      	ldr	r2, [pc, #552]	; (80034c0 <UART_SetConfig+0x2d8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d126      	bne.n	80032ea <UART_SetConfig+0x102>
 800329c:	2003      	movs	r0, #3
 800329e:	f7ff ff33 	bl	8003108 <LL_RCC_GetUSARTClockSource>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d81b      	bhi.n	80032e0 <UART_SetConfig+0xf8>
 80032a8:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <UART_SetConfig+0xc8>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032c1 	.word	0x080032c1
 80032b4:	080032d1 	.word	0x080032d1
 80032b8:	080032c9 	.word	0x080032c9
 80032bc:	080032d9 	.word	0x080032d9
 80032c0:	2301      	movs	r3, #1
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c6:	e042      	b.n	800334e <UART_SetConfig+0x166>
 80032c8:	2302      	movs	r3, #2
 80032ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ce:	e03e      	b.n	800334e <UART_SetConfig+0x166>
 80032d0:	2304      	movs	r3, #4
 80032d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d6:	e03a      	b.n	800334e <UART_SetConfig+0x166>
 80032d8:	2308      	movs	r3, #8
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032de:	e036      	b.n	800334e <UART_SetConfig+0x166>
 80032e0:	2310      	movs	r3, #16
 80032e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e6:	bf00      	nop
 80032e8:	e031      	b.n	800334e <UART_SetConfig+0x166>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a73      	ldr	r2, [pc, #460]	; (80034bc <UART_SetConfig+0x2d4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d129      	bne.n	8003348 <UART_SetConfig+0x160>
 80032f4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80032f8:	f7ff ff16 	bl	8003128 <LL_RCC_GetLPUARTClockSource>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003302:	d014      	beq.n	800332e <UART_SetConfig+0x146>
 8003304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003308:	d802      	bhi.n	8003310 <UART_SetConfig+0x128>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <UART_SetConfig+0x136>
 800330e:	e016      	b.n	800333e <UART_SetConfig+0x156>
 8003310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003314:	d007      	beq.n	8003326 <UART_SetConfig+0x13e>
 8003316:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800331a:	d00c      	beq.n	8003336 <UART_SetConfig+0x14e>
 800331c:	e00f      	b.n	800333e <UART_SetConfig+0x156>
 800331e:	2300      	movs	r3, #0
 8003320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003324:	e013      	b.n	800334e <UART_SetConfig+0x166>
 8003326:	2302      	movs	r3, #2
 8003328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332c:	e00f      	b.n	800334e <UART_SetConfig+0x166>
 800332e:	2304      	movs	r3, #4
 8003330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003334:	e00b      	b.n	800334e <UART_SetConfig+0x166>
 8003336:	2308      	movs	r3, #8
 8003338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333c:	e007      	b.n	800334e <UART_SetConfig+0x166>
 800333e:	2310      	movs	r3, #16
 8003340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003344:	bf00      	nop
 8003346:	e002      	b.n	800334e <UART_SetConfig+0x166>
 8003348:	2310      	movs	r3, #16
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a5a      	ldr	r2, [pc, #360]	; (80034bc <UART_SetConfig+0x2d4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	f040 8428 	bne.w	8003baa <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800335a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800335e:	2b08      	cmp	r3, #8
 8003360:	f200 8171 	bhi.w	8003646 <UART_SetConfig+0x45e>
 8003364:	a201      	add	r2, pc, #4	; (adr r2, 800336c <UART_SetConfig+0x184>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	08003391 	.word	0x08003391
 8003370:	08003647 	.word	0x08003647
 8003374:	08003433 	.word	0x08003433
 8003378:	08003647 	.word	0x08003647
 800337c:	080034f7 	.word	0x080034f7
 8003380:	08003647 	.word	0x08003647
 8003384:	08003647 	.word	0x08003647
 8003388:	08003647 	.word	0x08003647
 800338c:	08003599 	.word	0x08003599
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003390:	f7ff f99e 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8003394:	4602      	mov	r2, r0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	d044      	beq.n	8003428 <UART_SetConfig+0x240>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d03e      	beq.n	8003424 <UART_SetConfig+0x23c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d038      	beq.n	8003420 <UART_SetConfig+0x238>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d032      	beq.n	800341c <UART_SetConfig+0x234>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d02c      	beq.n	8003418 <UART_SetConfig+0x230>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d026      	beq.n	8003414 <UART_SetConfig+0x22c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	2b06      	cmp	r3, #6
 80033cc:	d020      	beq.n	8003410 <UART_SetConfig+0x228>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2b07      	cmp	r3, #7
 80033d4:	d01a      	beq.n	800340c <UART_SetConfig+0x224>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d014      	beq.n	8003408 <UART_SetConfig+0x220>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b09      	cmp	r3, #9
 80033e4:	d00e      	beq.n	8003404 <UART_SetConfig+0x21c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b0a      	cmp	r3, #10
 80033ec:	d008      	beq.n	8003400 <UART_SetConfig+0x218>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b0b      	cmp	r3, #11
 80033f4:	d102      	bne.n	80033fc <UART_SetConfig+0x214>
 80033f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033fa:	e016      	b.n	800342a <UART_SetConfig+0x242>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e014      	b.n	800342a <UART_SetConfig+0x242>
 8003400:	2380      	movs	r3, #128	; 0x80
 8003402:	e012      	b.n	800342a <UART_SetConfig+0x242>
 8003404:	2340      	movs	r3, #64	; 0x40
 8003406:	e010      	b.n	800342a <UART_SetConfig+0x242>
 8003408:	2320      	movs	r3, #32
 800340a:	e00e      	b.n	800342a <UART_SetConfig+0x242>
 800340c:	2310      	movs	r3, #16
 800340e:	e00c      	b.n	800342a <UART_SetConfig+0x242>
 8003410:	230c      	movs	r3, #12
 8003412:	e00a      	b.n	800342a <UART_SetConfig+0x242>
 8003414:	230a      	movs	r3, #10
 8003416:	e008      	b.n	800342a <UART_SetConfig+0x242>
 8003418:	2308      	movs	r3, #8
 800341a:	e006      	b.n	800342a <UART_SetConfig+0x242>
 800341c:	2306      	movs	r3, #6
 800341e:	e004      	b.n	800342a <UART_SetConfig+0x242>
 8003420:	2304      	movs	r3, #4
 8003422:	e002      	b.n	800342a <UART_SetConfig+0x242>
 8003424:	2302      	movs	r3, #2
 8003426:	e000      	b.n	800342a <UART_SetConfig+0x242>
 8003428:	2301      	movs	r3, #1
 800342a:	fbb2 f3f3 	udiv	r3, r2, r3
 800342e:	617b      	str	r3, [r7, #20]
        break;
 8003430:	e10c      	b.n	800364c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	2b00      	cmp	r3, #0
 8003438:	d05a      	beq.n	80034f0 <UART_SetConfig+0x308>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	2b01      	cmp	r3, #1
 8003440:	d054      	beq.n	80034ec <UART_SetConfig+0x304>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	2b02      	cmp	r3, #2
 8003448:	d04e      	beq.n	80034e8 <UART_SetConfig+0x300>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b03      	cmp	r3, #3
 8003450:	d048      	beq.n	80034e4 <UART_SetConfig+0x2fc>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2b04      	cmp	r3, #4
 8003458:	d02c      	beq.n	80034b4 <UART_SetConfig+0x2cc>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2b05      	cmp	r3, #5
 8003460:	d026      	beq.n	80034b0 <UART_SetConfig+0x2c8>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b06      	cmp	r3, #6
 8003468:	d020      	beq.n	80034ac <UART_SetConfig+0x2c4>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	2b07      	cmp	r3, #7
 8003470:	d01a      	beq.n	80034a8 <UART_SetConfig+0x2c0>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b08      	cmp	r3, #8
 8003478:	d014      	beq.n	80034a4 <UART_SetConfig+0x2bc>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	2b09      	cmp	r3, #9
 8003480:	d00e      	beq.n	80034a0 <UART_SetConfig+0x2b8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	2b0a      	cmp	r3, #10
 8003488:	d008      	beq.n	800349c <UART_SetConfig+0x2b4>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	2b0b      	cmp	r3, #11
 8003490:	d102      	bne.n	8003498 <UART_SetConfig+0x2b0>
 8003492:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003496:	e02c      	b.n	80034f2 <UART_SetConfig+0x30a>
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <UART_SetConfig+0x2dc>)
 800349a:	e02a      	b.n	80034f2 <UART_SetConfig+0x30a>
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <UART_SetConfig+0x2e0>)
 800349e:	e028      	b.n	80034f2 <UART_SetConfig+0x30a>
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <UART_SetConfig+0x2e4>)
 80034a2:	e026      	b.n	80034f2 <UART_SetConfig+0x30a>
 80034a4:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <UART_SetConfig+0x2e8>)
 80034a6:	e024      	b.n	80034f2 <UART_SetConfig+0x30a>
 80034a8:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <UART_SetConfig+0x2ec>)
 80034aa:	e022      	b.n	80034f2 <UART_SetConfig+0x30a>
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <UART_SetConfig+0x2f0>)
 80034ae:	e020      	b.n	80034f2 <UART_SetConfig+0x30a>
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <UART_SetConfig+0x2f4>)
 80034b2:	e01e      	b.n	80034f2 <UART_SetConfig+0x30a>
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <UART_SetConfig+0x2f8>)
 80034b6:	e01c      	b.n	80034f2 <UART_SetConfig+0x30a>
 80034b8:	cfff69f3 	.word	0xcfff69f3
 80034bc:	40008000 	.word	0x40008000
 80034c0:	40013800 	.word	0x40013800
 80034c4:	00f42400 	.word	0x00f42400
 80034c8:	0001e848 	.word	0x0001e848
 80034cc:	0003d090 	.word	0x0003d090
 80034d0:	0007a120 	.word	0x0007a120
 80034d4:	000f4240 	.word	0x000f4240
 80034d8:	00145855 	.word	0x00145855
 80034dc:	00186a00 	.word	0x00186a00
 80034e0:	001e8480 	.word	0x001e8480
 80034e4:	4ba6      	ldr	r3, [pc, #664]	; (8003780 <UART_SetConfig+0x598>)
 80034e6:	e004      	b.n	80034f2 <UART_SetConfig+0x30a>
 80034e8:	4ba6      	ldr	r3, [pc, #664]	; (8003784 <UART_SetConfig+0x59c>)
 80034ea:	e002      	b.n	80034f2 <UART_SetConfig+0x30a>
 80034ec:	4ba6      	ldr	r3, [pc, #664]	; (8003788 <UART_SetConfig+0x5a0>)
 80034ee:	e000      	b.n	80034f2 <UART_SetConfig+0x30a>
 80034f0:	4ba6      	ldr	r3, [pc, #664]	; (800378c <UART_SetConfig+0x5a4>)
 80034f2:	617b      	str	r3, [r7, #20]
        break;
 80034f4:	e0aa      	b.n	800364c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80034f6:	f7ff f86d 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 80034fa:	4602      	mov	r2, r0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2b00      	cmp	r3, #0
 8003502:	d044      	beq.n	800358e <UART_SetConfig+0x3a6>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2b01      	cmp	r3, #1
 800350a:	d03e      	beq.n	800358a <UART_SetConfig+0x3a2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	2b02      	cmp	r3, #2
 8003512:	d038      	beq.n	8003586 <UART_SetConfig+0x39e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	2b03      	cmp	r3, #3
 800351a:	d032      	beq.n	8003582 <UART_SetConfig+0x39a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	2b04      	cmp	r3, #4
 8003522:	d02c      	beq.n	800357e <UART_SetConfig+0x396>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	2b05      	cmp	r3, #5
 800352a:	d026      	beq.n	800357a <UART_SetConfig+0x392>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	2b06      	cmp	r3, #6
 8003532:	d020      	beq.n	8003576 <UART_SetConfig+0x38e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2b07      	cmp	r3, #7
 800353a:	d01a      	beq.n	8003572 <UART_SetConfig+0x38a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	2b08      	cmp	r3, #8
 8003542:	d014      	beq.n	800356e <UART_SetConfig+0x386>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	2b09      	cmp	r3, #9
 800354a:	d00e      	beq.n	800356a <UART_SetConfig+0x382>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	2b0a      	cmp	r3, #10
 8003552:	d008      	beq.n	8003566 <UART_SetConfig+0x37e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	2b0b      	cmp	r3, #11
 800355a:	d102      	bne.n	8003562 <UART_SetConfig+0x37a>
 800355c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003560:	e016      	b.n	8003590 <UART_SetConfig+0x3a8>
 8003562:	2301      	movs	r3, #1
 8003564:	e014      	b.n	8003590 <UART_SetConfig+0x3a8>
 8003566:	2380      	movs	r3, #128	; 0x80
 8003568:	e012      	b.n	8003590 <UART_SetConfig+0x3a8>
 800356a:	2340      	movs	r3, #64	; 0x40
 800356c:	e010      	b.n	8003590 <UART_SetConfig+0x3a8>
 800356e:	2320      	movs	r3, #32
 8003570:	e00e      	b.n	8003590 <UART_SetConfig+0x3a8>
 8003572:	2310      	movs	r3, #16
 8003574:	e00c      	b.n	8003590 <UART_SetConfig+0x3a8>
 8003576:	230c      	movs	r3, #12
 8003578:	e00a      	b.n	8003590 <UART_SetConfig+0x3a8>
 800357a:	230a      	movs	r3, #10
 800357c:	e008      	b.n	8003590 <UART_SetConfig+0x3a8>
 800357e:	2308      	movs	r3, #8
 8003580:	e006      	b.n	8003590 <UART_SetConfig+0x3a8>
 8003582:	2306      	movs	r3, #6
 8003584:	e004      	b.n	8003590 <UART_SetConfig+0x3a8>
 8003586:	2304      	movs	r3, #4
 8003588:	e002      	b.n	8003590 <UART_SetConfig+0x3a8>
 800358a:	2302      	movs	r3, #2
 800358c:	e000      	b.n	8003590 <UART_SetConfig+0x3a8>
 800358e:	2301      	movs	r3, #1
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	617b      	str	r3, [r7, #20]
        break;
 8003596:	e059      	b.n	800364c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2b00      	cmp	r3, #0
 800359e:	d04e      	beq.n	800363e <UART_SetConfig+0x456>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d047      	beq.n	8003638 <UART_SetConfig+0x450>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d040      	beq.n	8003632 <UART_SetConfig+0x44a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d039      	beq.n	800362c <UART_SetConfig+0x444>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d032      	beq.n	8003626 <UART_SetConfig+0x43e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d02b      	beq.n	8003620 <UART_SetConfig+0x438>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	2b06      	cmp	r3, #6
 80035ce:	d024      	beq.n	800361a <UART_SetConfig+0x432>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	2b07      	cmp	r3, #7
 80035d6:	d01d      	beq.n	8003614 <UART_SetConfig+0x42c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d016      	beq.n	800360e <UART_SetConfig+0x426>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	2b09      	cmp	r3, #9
 80035e6:	d00f      	beq.n	8003608 <UART_SetConfig+0x420>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	2b0a      	cmp	r3, #10
 80035ee:	d008      	beq.n	8003602 <UART_SetConfig+0x41a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	2b0b      	cmp	r3, #11
 80035f6:	d101      	bne.n	80035fc <UART_SetConfig+0x414>
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	e022      	b.n	8003642 <UART_SetConfig+0x45a>
 80035fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003600:	e01f      	b.n	8003642 <UART_SetConfig+0x45a>
 8003602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003606:	e01c      	b.n	8003642 <UART_SetConfig+0x45a>
 8003608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800360c:	e019      	b.n	8003642 <UART_SetConfig+0x45a>
 800360e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003612:	e016      	b.n	8003642 <UART_SetConfig+0x45a>
 8003614:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003618:	e013      	b.n	8003642 <UART_SetConfig+0x45a>
 800361a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800361e:	e010      	b.n	8003642 <UART_SetConfig+0x45a>
 8003620:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003624:	e00d      	b.n	8003642 <UART_SetConfig+0x45a>
 8003626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800362a:	e00a      	b.n	8003642 <UART_SetConfig+0x45a>
 800362c:	f241 5355 	movw	r3, #5461	; 0x1555
 8003630:	e007      	b.n	8003642 <UART_SetConfig+0x45a>
 8003632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003636:	e004      	b.n	8003642 <UART_SetConfig+0x45a>
 8003638:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800363c:	e001      	b.n	8003642 <UART_SetConfig+0x45a>
 800363e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003642:	617b      	str	r3, [r7, #20]
        break;
 8003644:	e002      	b.n	800364c <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	76fb      	strb	r3, [r7, #27]
        break;
 800364a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8604 	beq.w	800425c <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	429a      	cmp	r2, r3
 8003662:	d305      	bcc.n	8003670 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	429a      	cmp	r2, r3
 800366e:	d903      	bls.n	8003678 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	76fb      	strb	r3, [r7, #27]
 8003674:	f000 bdf2 	b.w	800425c <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 8003678:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800367c:	2b08      	cmp	r3, #8
 800367e:	f200 8281 	bhi.w	8003b84 <UART_SetConfig+0x99c>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <UART_SetConfig+0x4a0>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	080036ad 	.word	0x080036ad
 800368c:	08003b85 	.word	0x08003b85
 8003690:	080037fd 	.word	0x080037fd
 8003694:	08003b85 	.word	0x08003b85
 8003698:	080038f3 	.word	0x080038f3
 800369c:	08003b85 	.word	0x08003b85
 80036a0:	08003b85 	.word	0x08003b85
 80036a4:	08003b85 	.word	0x08003b85
 80036a8:	08003a31 	.word	0x08003a31
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80036ac:	f7ff f810 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 80036b0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f04f 0100 	mov.w	r1, #0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d070      	beq.n	80037a4 <UART_SetConfig+0x5bc>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d067      	beq.n	800379a <UART_SetConfig+0x5b2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d05e      	beq.n	8003790 <UART_SetConfig+0x5a8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d04c      	beq.n	8003774 <UART_SetConfig+0x58c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d043      	beq.n	800376a <UART_SetConfig+0x582>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d03a      	beq.n	8003760 <UART_SetConfig+0x578>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2b06      	cmp	r3, #6
 80036f0:	d031      	beq.n	8003756 <UART_SetConfig+0x56e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	2b07      	cmp	r3, #7
 80036f8:	d028      	beq.n	800374c <UART_SetConfig+0x564>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d01f      	beq.n	8003742 <UART_SetConfig+0x55a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	2b09      	cmp	r3, #9
 8003708:	d016      	beq.n	8003738 <UART_SetConfig+0x550>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	2b0a      	cmp	r3, #10
 8003710:	d00d      	beq.n	800372e <UART_SetConfig+0x546>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	2b0b      	cmp	r3, #11
 8003718:	d104      	bne.n	8003724 <UART_SetConfig+0x53c>
 800371a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800371e:	f04f 0400 	mov.w	r4, #0
 8003722:	e043      	b.n	80037ac <UART_SetConfig+0x5c4>
 8003724:	f04f 0301 	mov.w	r3, #1
 8003728:	f04f 0400 	mov.w	r4, #0
 800372c:	e03e      	b.n	80037ac <UART_SetConfig+0x5c4>
 800372e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003732:	f04f 0400 	mov.w	r4, #0
 8003736:	e039      	b.n	80037ac <UART_SetConfig+0x5c4>
 8003738:	f04f 0340 	mov.w	r3, #64	; 0x40
 800373c:	f04f 0400 	mov.w	r4, #0
 8003740:	e034      	b.n	80037ac <UART_SetConfig+0x5c4>
 8003742:	f04f 0320 	mov.w	r3, #32
 8003746:	f04f 0400 	mov.w	r4, #0
 800374a:	e02f      	b.n	80037ac <UART_SetConfig+0x5c4>
 800374c:	f04f 0310 	mov.w	r3, #16
 8003750:	f04f 0400 	mov.w	r4, #0
 8003754:	e02a      	b.n	80037ac <UART_SetConfig+0x5c4>
 8003756:	f04f 030c 	mov.w	r3, #12
 800375a:	f04f 0400 	mov.w	r4, #0
 800375e:	e025      	b.n	80037ac <UART_SetConfig+0x5c4>
 8003760:	f04f 030a 	mov.w	r3, #10
 8003764:	f04f 0400 	mov.w	r4, #0
 8003768:	e020      	b.n	80037ac <UART_SetConfig+0x5c4>
 800376a:	f04f 0308 	mov.w	r3, #8
 800376e:	f04f 0400 	mov.w	r4, #0
 8003772:	e01b      	b.n	80037ac <UART_SetConfig+0x5c4>
 8003774:	f04f 0306 	mov.w	r3, #6
 8003778:	f04f 0400 	mov.w	r4, #0
 800377c:	e016      	b.n	80037ac <UART_SetConfig+0x5c4>
 800377e:	bf00      	nop
 8003780:	0028b0aa 	.word	0x0028b0aa
 8003784:	003d0900 	.word	0x003d0900
 8003788:	007a1200 	.word	0x007a1200
 800378c:	00f42400 	.word	0x00f42400
 8003790:	f04f 0304 	mov.w	r3, #4
 8003794:	f04f 0400 	mov.w	r4, #0
 8003798:	e008      	b.n	80037ac <UART_SetConfig+0x5c4>
 800379a:	f04f 0302 	mov.w	r3, #2
 800379e:	f04f 0400 	mov.w	r4, #0
 80037a2:	e003      	b.n	80037ac <UART_SetConfig+0x5c4>
 80037a4:	f04f 0301 	mov.w	r3, #1
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	461a      	mov	r2, r3
 80037ae:	4623      	mov	r3, r4
 80037b0:	f7fc fce6 	bl	8000180 <__aeabi_uldivmod>
 80037b4:	4603      	mov	r3, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	4619      	mov	r1, r3
 80037ba:	4622      	mov	r2, r4
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	f04f 0400 	mov.w	r4, #0
 80037c4:	0214      	lsls	r4, r2, #8
 80037c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80037ca:	020b      	lsls	r3, r1, #8
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6852      	ldr	r2, [r2, #4]
 80037d0:	0852      	lsrs	r2, r2, #1
 80037d2:	4611      	mov	r1, r2
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	eb13 0b01 	adds.w	fp, r3, r1
 80037dc:	eb44 0c02 	adc.w	ip, r4, r2
 80037e0:	4658      	mov	r0, fp
 80037e2:	4661      	mov	r1, ip
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f04f 0400 	mov.w	r4, #0
 80037ec:	461a      	mov	r2, r3
 80037ee:	4623      	mov	r3, r4
 80037f0:	f7fc fcc6 	bl	8000180 <__aeabi_uldivmod>
 80037f4:	4603      	mov	r3, r0
 80037f6:	460c      	mov	r4, r1
 80037f8:	61fb      	str	r3, [r7, #28]
            break;
 80037fa:	e1c6      	b.n	8003b8a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	2b00      	cmp	r3, #0
 8003802:	d05b      	beq.n	80038bc <UART_SetConfig+0x6d4>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	2b01      	cmp	r3, #1
 800380a:	d053      	beq.n	80038b4 <UART_SetConfig+0x6cc>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	2b02      	cmp	r3, #2
 8003812:	d04b      	beq.n	80038ac <UART_SetConfig+0x6c4>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	2b03      	cmp	r3, #3
 800381a:	d043      	beq.n	80038a4 <UART_SetConfig+0x6bc>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	2b04      	cmp	r3, #4
 8003822:	d03b      	beq.n	800389c <UART_SetConfig+0x6b4>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	2b05      	cmp	r3, #5
 800382a:	d033      	beq.n	8003894 <UART_SetConfig+0x6ac>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	2b06      	cmp	r3, #6
 8003832:	d02b      	beq.n	800388c <UART_SetConfig+0x6a4>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	2b07      	cmp	r3, #7
 800383a:	d023      	beq.n	8003884 <UART_SetConfig+0x69c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	2b08      	cmp	r3, #8
 8003842:	d01b      	beq.n	800387c <UART_SetConfig+0x694>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2b09      	cmp	r3, #9
 800384a:	d013      	beq.n	8003874 <UART_SetConfig+0x68c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	2b0a      	cmp	r3, #10
 8003852:	d00b      	beq.n	800386c <UART_SetConfig+0x684>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	2b0b      	cmp	r3, #11
 800385a:	d103      	bne.n	8003864 <UART_SetConfig+0x67c>
 800385c:	4bae      	ldr	r3, [pc, #696]	; (8003b18 <UART_SetConfig+0x930>)
 800385e:	f04f 0400 	mov.w	r4, #0
 8003862:	e02e      	b.n	80038c2 <UART_SetConfig+0x6da>
 8003864:	4bad      	ldr	r3, [pc, #692]	; (8003b1c <UART_SetConfig+0x934>)
 8003866:	f04f 0400 	mov.w	r4, #0
 800386a:	e02a      	b.n	80038c2 <UART_SetConfig+0x6da>
 800386c:	4bac      	ldr	r3, [pc, #688]	; (8003b20 <UART_SetConfig+0x938>)
 800386e:	f04f 0400 	mov.w	r4, #0
 8003872:	e026      	b.n	80038c2 <UART_SetConfig+0x6da>
 8003874:	4bab      	ldr	r3, [pc, #684]	; (8003b24 <UART_SetConfig+0x93c>)
 8003876:	f04f 0400 	mov.w	r4, #0
 800387a:	e022      	b.n	80038c2 <UART_SetConfig+0x6da>
 800387c:	4baa      	ldr	r3, [pc, #680]	; (8003b28 <UART_SetConfig+0x940>)
 800387e:	f04f 0400 	mov.w	r4, #0
 8003882:	e01e      	b.n	80038c2 <UART_SetConfig+0x6da>
 8003884:	4ba9      	ldr	r3, [pc, #676]	; (8003b2c <UART_SetConfig+0x944>)
 8003886:	f04f 0400 	mov.w	r4, #0
 800388a:	e01a      	b.n	80038c2 <UART_SetConfig+0x6da>
 800388c:	a49e      	add	r4, pc, #632	; (adr r4, 8003b08 <UART_SetConfig+0x920>)
 800388e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003892:	e016      	b.n	80038c2 <UART_SetConfig+0x6da>
 8003894:	4ba6      	ldr	r3, [pc, #664]	; (8003b30 <UART_SetConfig+0x948>)
 8003896:	f04f 0400 	mov.w	r4, #0
 800389a:	e012      	b.n	80038c2 <UART_SetConfig+0x6da>
 800389c:	4ba5      	ldr	r3, [pc, #660]	; (8003b34 <UART_SetConfig+0x94c>)
 800389e:	f04f 0400 	mov.w	r4, #0
 80038a2:	e00e      	b.n	80038c2 <UART_SetConfig+0x6da>
 80038a4:	a49a      	add	r4, pc, #616	; (adr r4, 8003b10 <UART_SetConfig+0x928>)
 80038a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80038aa:	e00a      	b.n	80038c2 <UART_SetConfig+0x6da>
 80038ac:	4ba2      	ldr	r3, [pc, #648]	; (8003b38 <UART_SetConfig+0x950>)
 80038ae:	f04f 0400 	mov.w	r4, #0
 80038b2:	e006      	b.n	80038c2 <UART_SetConfig+0x6da>
 80038b4:	4ba1      	ldr	r3, [pc, #644]	; (8003b3c <UART_SetConfig+0x954>)
 80038b6:	f04f 0400 	mov.w	r4, #0
 80038ba:	e002      	b.n	80038c2 <UART_SetConfig+0x6da>
 80038bc:	4b97      	ldr	r3, [pc, #604]	; (8003b1c <UART_SetConfig+0x934>)
 80038be:	f04f 0400 	mov.w	r4, #0
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6852      	ldr	r2, [r2, #4]
 80038c6:	0852      	lsrs	r2, r2, #1
 80038c8:	4611      	mov	r1, r2
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	eb13 0b01 	adds.w	fp, r3, r1
 80038d2:	eb44 0c02 	adc.w	ip, r4, r2
 80038d6:	4658      	mov	r0, fp
 80038d8:	4661      	mov	r1, ip
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f04f 0400 	mov.w	r4, #0
 80038e2:	461a      	mov	r2, r3
 80038e4:	4623      	mov	r3, r4
 80038e6:	f7fc fc4b 	bl	8000180 <__aeabi_uldivmod>
 80038ea:	4603      	mov	r3, r0
 80038ec:	460c      	mov	r4, r1
 80038ee:	61fb      	str	r3, [r7, #28]
            break;
 80038f0:	e14b      	b.n	8003b8a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80038f2:	f7fe fe6f 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 80038f6:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f04f 0100 	mov.w	r1, #0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	2b00      	cmp	r3, #0
 8003906:	d067      	beq.n	80039d8 <UART_SetConfig+0x7f0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	2b01      	cmp	r3, #1
 800390e:	d05e      	beq.n	80039ce <UART_SetConfig+0x7e6>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	2b02      	cmp	r3, #2
 8003916:	d055      	beq.n	80039c4 <UART_SetConfig+0x7dc>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2b03      	cmp	r3, #3
 800391e:	d04c      	beq.n	80039ba <UART_SetConfig+0x7d2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2b04      	cmp	r3, #4
 8003926:	d043      	beq.n	80039b0 <UART_SetConfig+0x7c8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	2b05      	cmp	r3, #5
 800392e:	d03a      	beq.n	80039a6 <UART_SetConfig+0x7be>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	2b06      	cmp	r3, #6
 8003936:	d031      	beq.n	800399c <UART_SetConfig+0x7b4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	2b07      	cmp	r3, #7
 800393e:	d028      	beq.n	8003992 <UART_SetConfig+0x7aa>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	2b08      	cmp	r3, #8
 8003946:	d01f      	beq.n	8003988 <UART_SetConfig+0x7a0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	2b09      	cmp	r3, #9
 800394e:	d016      	beq.n	800397e <UART_SetConfig+0x796>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	2b0a      	cmp	r3, #10
 8003956:	d00d      	beq.n	8003974 <UART_SetConfig+0x78c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	2b0b      	cmp	r3, #11
 800395e:	d104      	bne.n	800396a <UART_SetConfig+0x782>
 8003960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003964:	f04f 0400 	mov.w	r4, #0
 8003968:	e03a      	b.n	80039e0 <UART_SetConfig+0x7f8>
 800396a:	f04f 0301 	mov.w	r3, #1
 800396e:	f04f 0400 	mov.w	r4, #0
 8003972:	e035      	b.n	80039e0 <UART_SetConfig+0x7f8>
 8003974:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003978:	f04f 0400 	mov.w	r4, #0
 800397c:	e030      	b.n	80039e0 <UART_SetConfig+0x7f8>
 800397e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003982:	f04f 0400 	mov.w	r4, #0
 8003986:	e02b      	b.n	80039e0 <UART_SetConfig+0x7f8>
 8003988:	f04f 0320 	mov.w	r3, #32
 800398c:	f04f 0400 	mov.w	r4, #0
 8003990:	e026      	b.n	80039e0 <UART_SetConfig+0x7f8>
 8003992:	f04f 0310 	mov.w	r3, #16
 8003996:	f04f 0400 	mov.w	r4, #0
 800399a:	e021      	b.n	80039e0 <UART_SetConfig+0x7f8>
 800399c:	f04f 030c 	mov.w	r3, #12
 80039a0:	f04f 0400 	mov.w	r4, #0
 80039a4:	e01c      	b.n	80039e0 <UART_SetConfig+0x7f8>
 80039a6:	f04f 030a 	mov.w	r3, #10
 80039aa:	f04f 0400 	mov.w	r4, #0
 80039ae:	e017      	b.n	80039e0 <UART_SetConfig+0x7f8>
 80039b0:	f04f 0308 	mov.w	r3, #8
 80039b4:	f04f 0400 	mov.w	r4, #0
 80039b8:	e012      	b.n	80039e0 <UART_SetConfig+0x7f8>
 80039ba:	f04f 0306 	mov.w	r3, #6
 80039be:	f04f 0400 	mov.w	r4, #0
 80039c2:	e00d      	b.n	80039e0 <UART_SetConfig+0x7f8>
 80039c4:	f04f 0304 	mov.w	r3, #4
 80039c8:	f04f 0400 	mov.w	r4, #0
 80039cc:	e008      	b.n	80039e0 <UART_SetConfig+0x7f8>
 80039ce:	f04f 0302 	mov.w	r3, #2
 80039d2:	f04f 0400 	mov.w	r4, #0
 80039d6:	e003      	b.n	80039e0 <UART_SetConfig+0x7f8>
 80039d8:	f04f 0301 	mov.w	r3, #1
 80039dc:	f04f 0400 	mov.w	r4, #0
 80039e0:	461a      	mov	r2, r3
 80039e2:	4623      	mov	r3, r4
 80039e4:	f7fc fbcc 	bl	8000180 <__aeabi_uldivmod>
 80039e8:	4603      	mov	r3, r0
 80039ea:	460c      	mov	r4, r1
 80039ec:	4619      	mov	r1, r3
 80039ee:	4622      	mov	r2, r4
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	f04f 0400 	mov.w	r4, #0
 80039f8:	0214      	lsls	r4, r2, #8
 80039fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80039fe:	020b      	lsls	r3, r1, #8
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6852      	ldr	r2, [r2, #4]
 8003a04:	0852      	lsrs	r2, r2, #1
 8003a06:	4611      	mov	r1, r2
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	eb13 0b01 	adds.w	fp, r3, r1
 8003a10:	eb44 0c02 	adc.w	ip, r4, r2
 8003a14:	4658      	mov	r0, fp
 8003a16:	4661      	mov	r1, ip
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f04f 0400 	mov.w	r4, #0
 8003a20:	461a      	mov	r2, r3
 8003a22:	4623      	mov	r3, r4
 8003a24:	f7fc fbac 	bl	8000180 <__aeabi_uldivmod>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	61fb      	str	r3, [r7, #28]
            break;
 8003a2e:	e0ac      	b.n	8003b8a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8089 	beq.w	8003b4c <UART_SetConfig+0x964>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d05b      	beq.n	8003afa <UART_SetConfig+0x912>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d052      	beq.n	8003af0 <UART_SetConfig+0x908>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d04a      	beq.n	8003ae8 <UART_SetConfig+0x900>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d041      	beq.n	8003ade <UART_SetConfig+0x8f6>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	2b05      	cmp	r3, #5
 8003a60:	d039      	beq.n	8003ad6 <UART_SetConfig+0x8ee>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2b06      	cmp	r3, #6
 8003a68:	d031      	beq.n	8003ace <UART_SetConfig+0x8e6>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	2b07      	cmp	r3, #7
 8003a70:	d028      	beq.n	8003ac4 <UART_SetConfig+0x8dc>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d01f      	beq.n	8003aba <UART_SetConfig+0x8d2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2b09      	cmp	r3, #9
 8003a80:	d016      	beq.n	8003ab0 <UART_SetConfig+0x8c8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	2b0a      	cmp	r3, #10
 8003a88:	d00d      	beq.n	8003aa6 <UART_SetConfig+0x8be>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	2b0b      	cmp	r3, #11
 8003a90:	d104      	bne.n	8003a9c <UART_SetConfig+0x8b4>
 8003a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a96:	f04f 0400 	mov.w	r4, #0
 8003a9a:	e05b      	b.n	8003b54 <UART_SetConfig+0x96c>
 8003a9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003aa0:	f04f 0400 	mov.w	r4, #0
 8003aa4:	e056      	b.n	8003b54 <UART_SetConfig+0x96c>
 8003aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aaa:	f04f 0400 	mov.w	r4, #0
 8003aae:	e051      	b.n	8003b54 <UART_SetConfig+0x96c>
 8003ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ab4:	f04f 0400 	mov.w	r4, #0
 8003ab8:	e04c      	b.n	8003b54 <UART_SetConfig+0x96c>
 8003aba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003abe:	f04f 0400 	mov.w	r4, #0
 8003ac2:	e047      	b.n	8003b54 <UART_SetConfig+0x96c>
 8003ac4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ac8:	f04f 0400 	mov.w	r4, #0
 8003acc:	e042      	b.n	8003b54 <UART_SetConfig+0x96c>
 8003ace:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <UART_SetConfig+0x958>)
 8003ad0:	f04f 0400 	mov.w	r4, #0
 8003ad4:	e03e      	b.n	8003b54 <UART_SetConfig+0x96c>
 8003ad6:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <UART_SetConfig+0x95c>)
 8003ad8:	f04f 0400 	mov.w	r4, #0
 8003adc:	e03a      	b.n	8003b54 <UART_SetConfig+0x96c>
 8003ade:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ae2:	f04f 0400 	mov.w	r4, #0
 8003ae6:	e035      	b.n	8003b54 <UART_SetConfig+0x96c>
 8003ae8:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <UART_SetConfig+0x960>)
 8003aea:	f04f 0400 	mov.w	r4, #0
 8003aee:	e031      	b.n	8003b54 <UART_SetConfig+0x96c>
 8003af0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003af4:	f04f 0400 	mov.w	r4, #0
 8003af8:	e02c      	b.n	8003b54 <UART_SetConfig+0x96c>
 8003afa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003afe:	f04f 0400 	mov.w	r4, #0
 8003b02:	e027      	b.n	8003b54 <UART_SetConfig+0x96c>
 8003b04:	f3af 8000 	nop.w
 8003b08:	14585500 	.word	0x14585500
 8003b0c:	00000000 	.word	0x00000000
 8003b10:	28b0aa00 	.word	0x28b0aa00
 8003b14:	00000000 	.word	0x00000000
 8003b18:	00f42400 	.word	0x00f42400
 8003b1c:	f4240000 	.word	0xf4240000
 8003b20:	01e84800 	.word	0x01e84800
 8003b24:	03d09000 	.word	0x03d09000
 8003b28:	07a12000 	.word	0x07a12000
 8003b2c:	0f424000 	.word	0x0f424000
 8003b30:	186a0000 	.word	0x186a0000
 8003b34:	1e848000 	.word	0x1e848000
 8003b38:	3d090000 	.word	0x3d090000
 8003b3c:	7a120000 	.word	0x7a120000
 8003b40:	000aaa00 	.word	0x000aaa00
 8003b44:	000ccc00 	.word	0x000ccc00
 8003b48:	00155500 	.word	0x00155500
 8003b4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003b50:	f04f 0400 	mov.w	r4, #0
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6852      	ldr	r2, [r2, #4]
 8003b58:	0852      	lsrs	r2, r2, #1
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	eb13 0b01 	adds.w	fp, r3, r1
 8003b64:	eb44 0c02 	adc.w	ip, r4, r2
 8003b68:	4658      	mov	r0, fp
 8003b6a:	4661      	mov	r1, ip
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f04f 0400 	mov.w	r4, #0
 8003b74:	461a      	mov	r2, r3
 8003b76:	4623      	mov	r3, r4
 8003b78:	f7fc fb02 	bl	8000180 <__aeabi_uldivmod>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	460c      	mov	r4, r1
 8003b80:	61fb      	str	r3, [r7, #28]
            break;
 8003b82:	e002      	b.n	8003b8a <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	76fb      	strb	r3, [r7, #27]
            break;
 8003b88:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b90:	d308      	bcc.n	8003ba4 <UART_SetConfig+0x9bc>
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b98:	d204      	bcs.n	8003ba4 <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	60da      	str	r2, [r3, #12]
 8003ba2:	e35b      	b.n	800425c <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	76fb      	strb	r3, [r7, #27]
 8003ba8:	e358      	b.n	800425c <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb2:	f040 81a6 	bne.w	8003f02 <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	2b07      	cmp	r3, #7
 8003bbe:	f200 8180 	bhi.w	8003ec2 <UART_SetConfig+0xcda>
 8003bc2:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <UART_SetConfig+0x9e0>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003be9 	.word	0x08003be9
 8003bcc:	08003ca1 	.word	0x08003ca1
 8003bd0:	08003ec3 	.word	0x08003ec3
 8003bd4:	08003d49 	.word	0x08003d49
 8003bd8:	08003ec3 	.word	0x08003ec3
 8003bdc:	08003ec3 	.word	0x08003ec3
 8003be0:	08003ec3 	.word	0x08003ec3
 8003be4:	08003e01 	.word	0x08003e01
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be8:	f7fe fd88 	bl	80026fc <HAL_RCC_GetPCLK2Freq>
 8003bec:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d044      	beq.n	8003c80 <UART_SetConfig+0xa98>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d03e      	beq.n	8003c7c <UART_SetConfig+0xa94>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d038      	beq.n	8003c78 <UART_SetConfig+0xa90>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d032      	beq.n	8003c74 <UART_SetConfig+0xa8c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d02c      	beq.n	8003c70 <UART_SetConfig+0xa88>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d026      	beq.n	8003c6c <UART_SetConfig+0xa84>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	2b06      	cmp	r3, #6
 8003c24:	d020      	beq.n	8003c68 <UART_SetConfig+0xa80>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	2b07      	cmp	r3, #7
 8003c2c:	d01a      	beq.n	8003c64 <UART_SetConfig+0xa7c>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d014      	beq.n	8003c60 <UART_SetConfig+0xa78>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	2b09      	cmp	r3, #9
 8003c3c:	d00e      	beq.n	8003c5c <UART_SetConfig+0xa74>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2b0a      	cmp	r3, #10
 8003c44:	d008      	beq.n	8003c58 <UART_SetConfig+0xa70>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	2b0b      	cmp	r3, #11
 8003c4c:	d102      	bne.n	8003c54 <UART_SetConfig+0xa6c>
 8003c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c52:	e016      	b.n	8003c82 <UART_SetConfig+0xa9a>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e014      	b.n	8003c82 <UART_SetConfig+0xa9a>
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	e012      	b.n	8003c82 <UART_SetConfig+0xa9a>
 8003c5c:	2340      	movs	r3, #64	; 0x40
 8003c5e:	e010      	b.n	8003c82 <UART_SetConfig+0xa9a>
 8003c60:	2320      	movs	r3, #32
 8003c62:	e00e      	b.n	8003c82 <UART_SetConfig+0xa9a>
 8003c64:	2310      	movs	r3, #16
 8003c66:	e00c      	b.n	8003c82 <UART_SetConfig+0xa9a>
 8003c68:	230c      	movs	r3, #12
 8003c6a:	e00a      	b.n	8003c82 <UART_SetConfig+0xa9a>
 8003c6c:	230a      	movs	r3, #10
 8003c6e:	e008      	b.n	8003c82 <UART_SetConfig+0xa9a>
 8003c70:	2308      	movs	r3, #8
 8003c72:	e006      	b.n	8003c82 <UART_SetConfig+0xa9a>
 8003c74:	2306      	movs	r3, #6
 8003c76:	e004      	b.n	8003c82 <UART_SetConfig+0xa9a>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	e002      	b.n	8003c82 <UART_SetConfig+0xa9a>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e000      	b.n	8003c82 <UART_SetConfig+0xa9a>
 8003c80:	2301      	movs	r3, #1
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	005a      	lsls	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	085b      	lsrs	r3, r3, #1
 8003c90:	441a      	add	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	61fb      	str	r3, [r7, #28]
        break;
 8003c9e:	e113      	b.n	8003ec8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d043      	beq.n	8003d30 <UART_SetConfig+0xb48>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d03d      	beq.n	8003d2c <UART_SetConfig+0xb44>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d037      	beq.n	8003d28 <UART_SetConfig+0xb40>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d031      	beq.n	8003d24 <UART_SetConfig+0xb3c>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d02b      	beq.n	8003d20 <UART_SetConfig+0xb38>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	2b05      	cmp	r3, #5
 8003cce:	d025      	beq.n	8003d1c <UART_SetConfig+0xb34>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2b06      	cmp	r3, #6
 8003cd6:	d01f      	beq.n	8003d18 <UART_SetConfig+0xb30>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	2b07      	cmp	r3, #7
 8003cde:	d019      	beq.n	8003d14 <UART_SetConfig+0xb2c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d013      	beq.n	8003d10 <UART_SetConfig+0xb28>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2b09      	cmp	r3, #9
 8003cee:	d00d      	beq.n	8003d0c <UART_SetConfig+0xb24>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	2b0a      	cmp	r3, #10
 8003cf6:	d007      	beq.n	8003d08 <UART_SetConfig+0xb20>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	2b0b      	cmp	r3, #11
 8003cfe:	d101      	bne.n	8003d04 <UART_SetConfig+0xb1c>
 8003d00:	4b8c      	ldr	r3, [pc, #560]	; (8003f34 <UART_SetConfig+0xd4c>)
 8003d02:	e016      	b.n	8003d32 <UART_SetConfig+0xb4a>
 8003d04:	4b8c      	ldr	r3, [pc, #560]	; (8003f38 <UART_SetConfig+0xd50>)
 8003d06:	e014      	b.n	8003d32 <UART_SetConfig+0xb4a>
 8003d08:	4b8c      	ldr	r3, [pc, #560]	; (8003f3c <UART_SetConfig+0xd54>)
 8003d0a:	e012      	b.n	8003d32 <UART_SetConfig+0xb4a>
 8003d0c:	4b8c      	ldr	r3, [pc, #560]	; (8003f40 <UART_SetConfig+0xd58>)
 8003d0e:	e010      	b.n	8003d32 <UART_SetConfig+0xb4a>
 8003d10:	4b8c      	ldr	r3, [pc, #560]	; (8003f44 <UART_SetConfig+0xd5c>)
 8003d12:	e00e      	b.n	8003d32 <UART_SetConfig+0xb4a>
 8003d14:	4b8c      	ldr	r3, [pc, #560]	; (8003f48 <UART_SetConfig+0xd60>)
 8003d16:	e00c      	b.n	8003d32 <UART_SetConfig+0xb4a>
 8003d18:	4b8c      	ldr	r3, [pc, #560]	; (8003f4c <UART_SetConfig+0xd64>)
 8003d1a:	e00a      	b.n	8003d32 <UART_SetConfig+0xb4a>
 8003d1c:	4b8c      	ldr	r3, [pc, #560]	; (8003f50 <UART_SetConfig+0xd68>)
 8003d1e:	e008      	b.n	8003d32 <UART_SetConfig+0xb4a>
 8003d20:	4b8c      	ldr	r3, [pc, #560]	; (8003f54 <UART_SetConfig+0xd6c>)
 8003d22:	e006      	b.n	8003d32 <UART_SetConfig+0xb4a>
 8003d24:	4b8c      	ldr	r3, [pc, #560]	; (8003f58 <UART_SetConfig+0xd70>)
 8003d26:	e004      	b.n	8003d32 <UART_SetConfig+0xb4a>
 8003d28:	4b8c      	ldr	r3, [pc, #560]	; (8003f5c <UART_SetConfig+0xd74>)
 8003d2a:	e002      	b.n	8003d32 <UART_SetConfig+0xb4a>
 8003d2c:	4b8c      	ldr	r3, [pc, #560]	; (8003f60 <UART_SetConfig+0xd78>)
 8003d2e:	e000      	b.n	8003d32 <UART_SetConfig+0xb4a>
 8003d30:	4b81      	ldr	r3, [pc, #516]	; (8003f38 <UART_SetConfig+0xd50>)
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6852      	ldr	r2, [r2, #4]
 8003d36:	0852      	lsrs	r2, r2, #1
 8003d38:	441a      	add	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	61fb      	str	r3, [r7, #28]
        break;
 8003d46:	e0bf      	b.n	8003ec8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d48:	f7fe fc44 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 8003d4c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d044      	beq.n	8003de0 <UART_SetConfig+0xbf8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d03e      	beq.n	8003ddc <UART_SetConfig+0xbf4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d038      	beq.n	8003dd8 <UART_SetConfig+0xbf0>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d032      	beq.n	8003dd4 <UART_SetConfig+0xbec>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d02c      	beq.n	8003dd0 <UART_SetConfig+0xbe8>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d026      	beq.n	8003dcc <UART_SetConfig+0xbe4>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	2b06      	cmp	r3, #6
 8003d84:	d020      	beq.n	8003dc8 <UART_SetConfig+0xbe0>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	2b07      	cmp	r3, #7
 8003d8c:	d01a      	beq.n	8003dc4 <UART_SetConfig+0xbdc>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d014      	beq.n	8003dc0 <UART_SetConfig+0xbd8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	2b09      	cmp	r3, #9
 8003d9c:	d00e      	beq.n	8003dbc <UART_SetConfig+0xbd4>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	2b0a      	cmp	r3, #10
 8003da4:	d008      	beq.n	8003db8 <UART_SetConfig+0xbd0>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	2b0b      	cmp	r3, #11
 8003dac:	d102      	bne.n	8003db4 <UART_SetConfig+0xbcc>
 8003dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003db2:	e016      	b.n	8003de2 <UART_SetConfig+0xbfa>
 8003db4:	2301      	movs	r3, #1
 8003db6:	e014      	b.n	8003de2 <UART_SetConfig+0xbfa>
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	e012      	b.n	8003de2 <UART_SetConfig+0xbfa>
 8003dbc:	2340      	movs	r3, #64	; 0x40
 8003dbe:	e010      	b.n	8003de2 <UART_SetConfig+0xbfa>
 8003dc0:	2320      	movs	r3, #32
 8003dc2:	e00e      	b.n	8003de2 <UART_SetConfig+0xbfa>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	e00c      	b.n	8003de2 <UART_SetConfig+0xbfa>
 8003dc8:	230c      	movs	r3, #12
 8003dca:	e00a      	b.n	8003de2 <UART_SetConfig+0xbfa>
 8003dcc:	230a      	movs	r3, #10
 8003dce:	e008      	b.n	8003de2 <UART_SetConfig+0xbfa>
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	e006      	b.n	8003de2 <UART_SetConfig+0xbfa>
 8003dd4:	2306      	movs	r3, #6
 8003dd6:	e004      	b.n	8003de2 <UART_SetConfig+0xbfa>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	e002      	b.n	8003de2 <UART_SetConfig+0xbfa>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e000      	b.n	8003de2 <UART_SetConfig+0xbfa>
 8003de0:	2301      	movs	r3, #1
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	005a      	lsls	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	441a      	add	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	61fb      	str	r3, [r7, #28]
        break;
 8003dfe:	e063      	b.n	8003ec8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d04f      	beq.n	8003ea8 <UART_SetConfig+0xcc0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d048      	beq.n	8003ea2 <UART_SetConfig+0xcba>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d041      	beq.n	8003e9c <UART_SetConfig+0xcb4>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d03a      	beq.n	8003e96 <UART_SetConfig+0xcae>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d033      	beq.n	8003e90 <UART_SetConfig+0xca8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	2b05      	cmp	r3, #5
 8003e2e:	d02c      	beq.n	8003e8a <UART_SetConfig+0xca2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	2b06      	cmp	r3, #6
 8003e36:	d025      	beq.n	8003e84 <UART_SetConfig+0xc9c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	2b07      	cmp	r3, #7
 8003e3e:	d01e      	beq.n	8003e7e <UART_SetConfig+0xc96>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d017      	beq.n	8003e78 <UART_SetConfig+0xc90>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	2b09      	cmp	r3, #9
 8003e4e:	d010      	beq.n	8003e72 <UART_SetConfig+0xc8a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	2b0a      	cmp	r3, #10
 8003e56:	d009      	beq.n	8003e6c <UART_SetConfig+0xc84>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	2b0b      	cmp	r3, #11
 8003e5e:	d102      	bne.n	8003e66 <UART_SetConfig+0xc7e>
 8003e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e64:	e022      	b.n	8003eac <UART_SetConfig+0xcc4>
 8003e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e6a:	e01f      	b.n	8003eac <UART_SetConfig+0xcc4>
 8003e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e70:	e01c      	b.n	8003eac <UART_SetConfig+0xcc4>
 8003e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e76:	e019      	b.n	8003eac <UART_SetConfig+0xcc4>
 8003e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e7c:	e016      	b.n	8003eac <UART_SetConfig+0xcc4>
 8003e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e82:	e013      	b.n	8003eac <UART_SetConfig+0xcc4>
 8003e84:	f241 5354 	movw	r3, #5460	; 0x1554
 8003e88:	e010      	b.n	8003eac <UART_SetConfig+0xcc4>
 8003e8a:	f641 1398 	movw	r3, #6552	; 0x1998
 8003e8e:	e00d      	b.n	8003eac <UART_SetConfig+0xcc4>
 8003e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e94:	e00a      	b.n	8003eac <UART_SetConfig+0xcc4>
 8003e96:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8003e9a:	e007      	b.n	8003eac <UART_SetConfig+0xcc4>
 8003e9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ea0:	e004      	b.n	8003eac <UART_SetConfig+0xcc4>
 8003ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ea6:	e001      	b.n	8003eac <UART_SetConfig+0xcc4>
 8003ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6852      	ldr	r2, [r2, #4]
 8003eb0:	0852      	lsrs	r2, r2, #1
 8003eb2:	441a      	add	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	61fb      	str	r3, [r7, #28]
        break;
 8003ec0:	e002      	b.n	8003ec8 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	76fb      	strb	r3, [r7, #27]
        break;
 8003ec6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2b0f      	cmp	r3, #15
 8003ecc:	d916      	bls.n	8003efc <UART_SetConfig+0xd14>
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed4:	d212      	bcs.n	8003efc <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f023 030f 	bic.w	r3, r3, #15
 8003ede:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	89fb      	ldrh	r3, [r7, #14]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	89fa      	ldrh	r2, [r7, #14]
 8003ef8:	60da      	str	r2, [r3, #12]
 8003efa:	e1af      	b.n	800425c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	76fb      	strb	r3, [r7, #27]
 8003f00:	e1ac      	b.n	800425c <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 8003f02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f06:	3b01      	subs	r3, #1
 8003f08:	2b07      	cmp	r3, #7
 8003f0a:	f200 8196 	bhi.w	800423a <UART_SetConfig+0x1052>
 8003f0e:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <UART_SetConfig+0xd2c>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f65 	.word	0x08003f65
 8003f18:	0800401b 	.word	0x0800401b
 8003f1c:	0800423b 	.word	0x0800423b
 8003f20:	080040c5 	.word	0x080040c5
 8003f24:	0800423b 	.word	0x0800423b
 8003f28:	0800423b 	.word	0x0800423b
 8003f2c:	0800423b 	.word	0x0800423b
 8003f30:	0800417b 	.word	0x0800417b
 8003f34:	0001e848 	.word	0x0001e848
 8003f38:	01e84800 	.word	0x01e84800
 8003f3c:	0003d090 	.word	0x0003d090
 8003f40:	0007a120 	.word	0x0007a120
 8003f44:	000f4240 	.word	0x000f4240
 8003f48:	001e8480 	.word	0x001e8480
 8003f4c:	0028b0aa 	.word	0x0028b0aa
 8003f50:	0030d400 	.word	0x0030d400
 8003f54:	003d0900 	.word	0x003d0900
 8003f58:	00516154 	.word	0x00516154
 8003f5c:	007a1200 	.word	0x007a1200
 8003f60:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7fe fbca 	bl	80026fc <HAL_RCC_GetPCLK2Freq>
 8003f68:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d044      	beq.n	8003ffc <UART_SetConfig+0xe14>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d03e      	beq.n	8003ff8 <UART_SetConfig+0xe10>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d038      	beq.n	8003ff4 <UART_SetConfig+0xe0c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d032      	beq.n	8003ff0 <UART_SetConfig+0xe08>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d02c      	beq.n	8003fec <UART_SetConfig+0xe04>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d026      	beq.n	8003fe8 <UART_SetConfig+0xe00>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d020      	beq.n	8003fe4 <UART_SetConfig+0xdfc>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	2b07      	cmp	r3, #7
 8003fa8:	d01a      	beq.n	8003fe0 <UART_SetConfig+0xdf8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d014      	beq.n	8003fdc <UART_SetConfig+0xdf4>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	2b09      	cmp	r3, #9
 8003fb8:	d00e      	beq.n	8003fd8 <UART_SetConfig+0xdf0>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	2b0a      	cmp	r3, #10
 8003fc0:	d008      	beq.n	8003fd4 <UART_SetConfig+0xdec>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	2b0b      	cmp	r3, #11
 8003fc8:	d102      	bne.n	8003fd0 <UART_SetConfig+0xde8>
 8003fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fce:	e016      	b.n	8003ffe <UART_SetConfig+0xe16>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e014      	b.n	8003ffe <UART_SetConfig+0xe16>
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	e012      	b.n	8003ffe <UART_SetConfig+0xe16>
 8003fd8:	2340      	movs	r3, #64	; 0x40
 8003fda:	e010      	b.n	8003ffe <UART_SetConfig+0xe16>
 8003fdc:	2320      	movs	r3, #32
 8003fde:	e00e      	b.n	8003ffe <UART_SetConfig+0xe16>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	e00c      	b.n	8003ffe <UART_SetConfig+0xe16>
 8003fe4:	230c      	movs	r3, #12
 8003fe6:	e00a      	b.n	8003ffe <UART_SetConfig+0xe16>
 8003fe8:	230a      	movs	r3, #10
 8003fea:	e008      	b.n	8003ffe <UART_SetConfig+0xe16>
 8003fec:	2308      	movs	r3, #8
 8003fee:	e006      	b.n	8003ffe <UART_SetConfig+0xe16>
 8003ff0:	2306      	movs	r3, #6
 8003ff2:	e004      	b.n	8003ffe <UART_SetConfig+0xe16>
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	e002      	b.n	8003ffe <UART_SetConfig+0xe16>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e000      	b.n	8003ffe <UART_SetConfig+0xe16>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	fbb2 f2f3 	udiv	r2, r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	085b      	lsrs	r3, r3, #1
 800400a:	441a      	add	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	b29b      	uxth	r3, r3
 8004016:	61fb      	str	r3, [r7, #28]
        break;
 8004018:	e112      	b.n	8004240 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	d044      	beq.n	80040ac <UART_SetConfig+0xec4>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	2b01      	cmp	r3, #1
 8004028:	d03e      	beq.n	80040a8 <UART_SetConfig+0xec0>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	2b02      	cmp	r3, #2
 8004030:	d038      	beq.n	80040a4 <UART_SetConfig+0xebc>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	2b03      	cmp	r3, #3
 8004038:	d032      	beq.n	80040a0 <UART_SetConfig+0xeb8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	2b04      	cmp	r3, #4
 8004040:	d02c      	beq.n	800409c <UART_SetConfig+0xeb4>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	2b05      	cmp	r3, #5
 8004048:	d026      	beq.n	8004098 <UART_SetConfig+0xeb0>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2b06      	cmp	r3, #6
 8004050:	d020      	beq.n	8004094 <UART_SetConfig+0xeac>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	2b07      	cmp	r3, #7
 8004058:	d01a      	beq.n	8004090 <UART_SetConfig+0xea8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	2b08      	cmp	r3, #8
 8004060:	d014      	beq.n	800408c <UART_SetConfig+0xea4>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	2b09      	cmp	r3, #9
 8004068:	d00e      	beq.n	8004088 <UART_SetConfig+0xea0>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	2b0a      	cmp	r3, #10
 8004070:	d008      	beq.n	8004084 <UART_SetConfig+0xe9c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	2b0b      	cmp	r3, #11
 8004078:	d102      	bne.n	8004080 <UART_SetConfig+0xe98>
 800407a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800407e:	e016      	b.n	80040ae <UART_SetConfig+0xec6>
 8004080:	4b80      	ldr	r3, [pc, #512]	; (8004284 <UART_SetConfig+0x109c>)
 8004082:	e014      	b.n	80040ae <UART_SetConfig+0xec6>
 8004084:	4b80      	ldr	r3, [pc, #512]	; (8004288 <UART_SetConfig+0x10a0>)
 8004086:	e012      	b.n	80040ae <UART_SetConfig+0xec6>
 8004088:	4b80      	ldr	r3, [pc, #512]	; (800428c <UART_SetConfig+0x10a4>)
 800408a:	e010      	b.n	80040ae <UART_SetConfig+0xec6>
 800408c:	4b80      	ldr	r3, [pc, #512]	; (8004290 <UART_SetConfig+0x10a8>)
 800408e:	e00e      	b.n	80040ae <UART_SetConfig+0xec6>
 8004090:	4b80      	ldr	r3, [pc, #512]	; (8004294 <UART_SetConfig+0x10ac>)
 8004092:	e00c      	b.n	80040ae <UART_SetConfig+0xec6>
 8004094:	4b80      	ldr	r3, [pc, #512]	; (8004298 <UART_SetConfig+0x10b0>)
 8004096:	e00a      	b.n	80040ae <UART_SetConfig+0xec6>
 8004098:	4b80      	ldr	r3, [pc, #512]	; (800429c <UART_SetConfig+0x10b4>)
 800409a:	e008      	b.n	80040ae <UART_SetConfig+0xec6>
 800409c:	4b80      	ldr	r3, [pc, #512]	; (80042a0 <UART_SetConfig+0x10b8>)
 800409e:	e006      	b.n	80040ae <UART_SetConfig+0xec6>
 80040a0:	4b80      	ldr	r3, [pc, #512]	; (80042a4 <UART_SetConfig+0x10bc>)
 80040a2:	e004      	b.n	80040ae <UART_SetConfig+0xec6>
 80040a4:	4b80      	ldr	r3, [pc, #512]	; (80042a8 <UART_SetConfig+0x10c0>)
 80040a6:	e002      	b.n	80040ae <UART_SetConfig+0xec6>
 80040a8:	4b80      	ldr	r3, [pc, #512]	; (80042ac <UART_SetConfig+0x10c4>)
 80040aa:	e000      	b.n	80040ae <UART_SetConfig+0xec6>
 80040ac:	4b75      	ldr	r3, [pc, #468]	; (8004284 <UART_SetConfig+0x109c>)
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6852      	ldr	r2, [r2, #4]
 80040b2:	0852      	lsrs	r2, r2, #1
 80040b4:	441a      	add	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80040be:	b29b      	uxth	r3, r3
 80040c0:	61fb      	str	r3, [r7, #28]
        break;
 80040c2:	e0bd      	b.n	8004240 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040c4:	f7fe fa86 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 80040c8:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d044      	beq.n	800415c <UART_SetConfig+0xf74>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d03e      	beq.n	8004158 <UART_SetConfig+0xf70>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d038      	beq.n	8004154 <UART_SetConfig+0xf6c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d032      	beq.n	8004150 <UART_SetConfig+0xf68>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d02c      	beq.n	800414c <UART_SetConfig+0xf64>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d026      	beq.n	8004148 <UART_SetConfig+0xf60>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d020      	beq.n	8004144 <UART_SetConfig+0xf5c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	2b07      	cmp	r3, #7
 8004108:	d01a      	beq.n	8004140 <UART_SetConfig+0xf58>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b08      	cmp	r3, #8
 8004110:	d014      	beq.n	800413c <UART_SetConfig+0xf54>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2b09      	cmp	r3, #9
 8004118:	d00e      	beq.n	8004138 <UART_SetConfig+0xf50>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	2b0a      	cmp	r3, #10
 8004120:	d008      	beq.n	8004134 <UART_SetConfig+0xf4c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	2b0b      	cmp	r3, #11
 8004128:	d102      	bne.n	8004130 <UART_SetConfig+0xf48>
 800412a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800412e:	e016      	b.n	800415e <UART_SetConfig+0xf76>
 8004130:	2301      	movs	r3, #1
 8004132:	e014      	b.n	800415e <UART_SetConfig+0xf76>
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	e012      	b.n	800415e <UART_SetConfig+0xf76>
 8004138:	2340      	movs	r3, #64	; 0x40
 800413a:	e010      	b.n	800415e <UART_SetConfig+0xf76>
 800413c:	2320      	movs	r3, #32
 800413e:	e00e      	b.n	800415e <UART_SetConfig+0xf76>
 8004140:	2310      	movs	r3, #16
 8004142:	e00c      	b.n	800415e <UART_SetConfig+0xf76>
 8004144:	230c      	movs	r3, #12
 8004146:	e00a      	b.n	800415e <UART_SetConfig+0xf76>
 8004148:	230a      	movs	r3, #10
 800414a:	e008      	b.n	800415e <UART_SetConfig+0xf76>
 800414c:	2308      	movs	r3, #8
 800414e:	e006      	b.n	800415e <UART_SetConfig+0xf76>
 8004150:	2306      	movs	r3, #6
 8004152:	e004      	b.n	800415e <UART_SetConfig+0xf76>
 8004154:	2304      	movs	r3, #4
 8004156:	e002      	b.n	800415e <UART_SetConfig+0xf76>
 8004158:	2302      	movs	r3, #2
 800415a:	e000      	b.n	800415e <UART_SetConfig+0xf76>
 800415c:	2301      	movs	r3, #1
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	fbb2 f2f3 	udiv	r2, r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	441a      	add	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	b29b      	uxth	r3, r3
 8004176:	61fb      	str	r3, [r7, #28]
        break;
 8004178:	e062      	b.n	8004240 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2b00      	cmp	r3, #0
 8004180:	d04e      	beq.n	8004220 <UART_SetConfig+0x1038>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	2b01      	cmp	r3, #1
 8004188:	d047      	beq.n	800421a <UART_SetConfig+0x1032>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	2b02      	cmp	r3, #2
 8004190:	d040      	beq.n	8004214 <UART_SetConfig+0x102c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2b03      	cmp	r3, #3
 8004198:	d039      	beq.n	800420e <UART_SetConfig+0x1026>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d032      	beq.n	8004208 <UART_SetConfig+0x1020>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2b05      	cmp	r3, #5
 80041a8:	d02b      	beq.n	8004202 <UART_SetConfig+0x101a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	2b06      	cmp	r3, #6
 80041b0:	d024      	beq.n	80041fc <UART_SetConfig+0x1014>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b07      	cmp	r3, #7
 80041b8:	d01d      	beq.n	80041f6 <UART_SetConfig+0x100e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d016      	beq.n	80041f0 <UART_SetConfig+0x1008>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	2b09      	cmp	r3, #9
 80041c8:	d00f      	beq.n	80041ea <UART_SetConfig+0x1002>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2b0a      	cmp	r3, #10
 80041d0:	d008      	beq.n	80041e4 <UART_SetConfig+0xffc>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	2b0b      	cmp	r3, #11
 80041d8:	d101      	bne.n	80041de <UART_SetConfig+0xff6>
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	e022      	b.n	8004224 <UART_SetConfig+0x103c>
 80041de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e2:	e01f      	b.n	8004224 <UART_SetConfig+0x103c>
 80041e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041e8:	e01c      	b.n	8004224 <UART_SetConfig+0x103c>
 80041ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041ee:	e019      	b.n	8004224 <UART_SetConfig+0x103c>
 80041f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041f4:	e016      	b.n	8004224 <UART_SetConfig+0x103c>
 80041f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041fa:	e013      	b.n	8004224 <UART_SetConfig+0x103c>
 80041fc:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004200:	e010      	b.n	8004224 <UART_SetConfig+0x103c>
 8004202:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004206:	e00d      	b.n	8004224 <UART_SetConfig+0x103c>
 8004208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800420c:	e00a      	b.n	8004224 <UART_SetConfig+0x103c>
 800420e:	f241 5355 	movw	r3, #5461	; 0x1555
 8004212:	e007      	b.n	8004224 <UART_SetConfig+0x103c>
 8004214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004218:	e004      	b.n	8004224 <UART_SetConfig+0x103c>
 800421a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800421e:	e001      	b.n	8004224 <UART_SetConfig+0x103c>
 8004220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6852      	ldr	r2, [r2, #4]
 8004228:	0852      	lsrs	r2, r2, #1
 800422a:	441a      	add	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	b29b      	uxth	r3, r3
 8004236:	61fb      	str	r3, [r7, #28]
        break;
 8004238:	e002      	b.n	8004240 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	76fb      	strb	r3, [r7, #27]
        break;
 800423e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b0f      	cmp	r3, #15
 8004244:	d908      	bls.n	8004258 <UART_SetConfig+0x1070>
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424c:	d204      	bcs.n	8004258 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	60da      	str	r2, [r3, #12]
 8004256:	e001      	b.n	800425c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004278:	7efb      	ldrb	r3, [r7, #27]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3728      	adds	r7, #40	; 0x28
 800427e:	46bd      	mov	sp, r7
 8004280:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004284:	00f42400 	.word	0x00f42400
 8004288:	0001e848 	.word	0x0001e848
 800428c:	0003d090 	.word	0x0003d090
 8004290:	0007a120 	.word	0x0007a120
 8004294:	000f4240 	.word	0x000f4240
 8004298:	00145855 	.word	0x00145855
 800429c:	00186a00 	.word	0x00186a00
 80042a0:	001e8480 	.word	0x001e8480
 80042a4:	0028b0aa 	.word	0x0028b0aa
 80042a8:	003d0900 	.word	0x003d0900
 80042ac:	007a1200 	.word	0x007a1200

080042b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01a      	beq.n	80043c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ae:	d10a      	bne.n	80043c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	605a      	str	r2, [r3, #4]
  }
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004404:	f7fc fc94 	bl	8000d30 <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b08      	cmp	r3, #8
 8004416:	d10e      	bne.n	8004436 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f82c 	bl	8004484 <UART_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e022      	b.n	800447c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b04      	cmp	r3, #4
 8004442:	d10e      	bne.n	8004462 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f816 	bl	8004484 <UART_WaitOnFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e00c      	b.n	800447c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004494:	e062      	b.n	800455c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d05e      	beq.n	800455c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449e:	f7fc fc47 	bl	8000d30 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d302      	bcc.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d11d      	bne.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044c2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e045      	b.n	800457c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d02e      	beq.n	800455c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800450c:	d126      	bne.n	800455c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004516:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004526:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e00f      	b.n	800457c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	429a      	cmp	r2, r3
 8004578:	d08d      	beq.n	8004496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_UARTEx_DisableFifoMode+0x16>
 8004596:	2302      	movs	r3, #2
 8004598:	e027      	b.n	80045ea <HAL_UARTEx_DisableFifoMode+0x66>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2224      	movs	r2, #36	; 0x24
 80045a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80045c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800460a:	2302      	movs	r3, #2
 800460c:	e02d      	b.n	800466a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2224      	movs	r2, #36	; 0x24
 800461a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f850 	bl	80046f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004686:	2302      	movs	r3, #2
 8004688:	e02d      	b.n	80046e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2224      	movs	r2, #36	; 0x24
 8004696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f812 	bl	80046f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b089      	sub	sp, #36	; 0x24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80046f8:	4a2f      	ldr	r2, [pc, #188]	; (80047b8 <UARTEx_SetNbDataToProcess+0xc8>)
 80046fa:	f107 0314 	add.w	r3, r7, #20
 80046fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004702:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004706:	4a2d      	ldr	r2, [pc, #180]	; (80047bc <UARTEx_SetNbDataToProcess+0xcc>)
 8004708:	f107 030c 	add.w	r3, r7, #12
 800470c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004710:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004718:	2b00      	cmp	r3, #0
 800471a:	d108      	bne.n	800472e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800472c:	e03d      	b.n	80047aa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800472e:	2308      	movs	r3, #8
 8004730:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004732:	2308      	movs	r3, #8
 8004734:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	0e5b      	lsrs	r3, r3, #25
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	0f5b      	lsrs	r3, r3, #29
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004756:	7fbb      	ldrb	r3, [r7, #30]
 8004758:	7f3a      	ldrb	r2, [r7, #28]
 800475a:	f107 0120 	add.w	r1, r7, #32
 800475e:	440a      	add	r2, r1
 8004760:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004764:	fb02 f303 	mul.w	r3, r2, r3
 8004768:	7f3a      	ldrb	r2, [r7, #28]
 800476a:	f107 0120 	add.w	r1, r7, #32
 800476e:	440a      	add	r2, r1
 8004770:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004774:	fb93 f3f2 	sdiv	r3, r3, r2
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004780:	7ffb      	ldrb	r3, [r7, #31]
 8004782:	7f7a      	ldrb	r2, [r7, #29]
 8004784:	f107 0120 	add.w	r1, r7, #32
 8004788:	440a      	add	r2, r1
 800478a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	7f7a      	ldrb	r2, [r7, #29]
 8004794:	f107 0120 	add.w	r1, r7, #32
 8004798:	440a      	add	r2, r1
 800479a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800479e:	fb93 f3f2 	sdiv	r3, r3, r2
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80047aa:	bf00      	nop
 80047ac:	3724      	adds	r7, #36	; 0x24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	08004910 	.word	0x08004910
 80047bc:	08004918 	.word	0x08004918

080047c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047c8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80047cc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	89fb      	ldrh	r3, [r7, #14]
 80047d8:	4313      	orrs	r3, r2
 80047da:	b29a      	uxth	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047f8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80047fc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004804:	b29b      	uxth	r3, r3
 8004806:	b21a      	sxth	r2, r3
 8004808:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800480c:	43db      	mvns	r3, r3
 800480e:	b21b      	sxth	r3, r3
 8004810:	4013      	ands	r3, r2
 8004812:	b21b      	sxth	r3, r3
 8004814:	b29a      	uxth	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800482a:	b084      	sub	sp, #16
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	f107 0014 	add.w	r0, r7, #20
 8004838:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff ffaf 	bl	80047c0 <USB_EnableGlobalInt>

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800486e:	b004      	add	sp, #16
 8004870:	4770      	bx	lr
	...

08004874 <__libc_init_array>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	4e0d      	ldr	r6, [pc, #52]	; (80048ac <__libc_init_array+0x38>)
 8004878:	4c0d      	ldr	r4, [pc, #52]	; (80048b0 <__libc_init_array+0x3c>)
 800487a:	1ba4      	subs	r4, r4, r6
 800487c:	10a4      	asrs	r4, r4, #2
 800487e:	2500      	movs	r5, #0
 8004880:	42a5      	cmp	r5, r4
 8004882:	d109      	bne.n	8004898 <__libc_init_array+0x24>
 8004884:	4e0b      	ldr	r6, [pc, #44]	; (80048b4 <__libc_init_array+0x40>)
 8004886:	4c0c      	ldr	r4, [pc, #48]	; (80048b8 <__libc_init_array+0x44>)
 8004888:	f000 f820 	bl	80048cc <_init>
 800488c:	1ba4      	subs	r4, r4, r6
 800488e:	10a4      	asrs	r4, r4, #2
 8004890:	2500      	movs	r5, #0
 8004892:	42a5      	cmp	r5, r4
 8004894:	d105      	bne.n	80048a2 <__libc_init_array+0x2e>
 8004896:	bd70      	pop	{r4, r5, r6, pc}
 8004898:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800489c:	4798      	blx	r3
 800489e:	3501      	adds	r5, #1
 80048a0:	e7ee      	b.n	8004880 <__libc_init_array+0xc>
 80048a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048a6:	4798      	blx	r3
 80048a8:	3501      	adds	r5, #1
 80048aa:	e7f2      	b.n	8004892 <__libc_init_array+0x1e>
 80048ac:	080049c8 	.word	0x080049c8
 80048b0:	080049c8 	.word	0x080049c8
 80048b4:	080049c8 	.word	0x080049c8
 80048b8:	080049cc 	.word	0x080049cc

080048bc <memset>:
 80048bc:	4402      	add	r2, r0
 80048be:	4603      	mov	r3, r0
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d100      	bne.n	80048c6 <memset+0xa>
 80048c4:	4770      	bx	lr
 80048c6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ca:	e7f9      	b.n	80048c0 <memset+0x4>

080048cc <_init>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	bf00      	nop
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr

080048d8 <_fini>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr
